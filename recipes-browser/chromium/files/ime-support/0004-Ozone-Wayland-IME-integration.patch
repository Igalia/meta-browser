From 65e3fc5e7c66bbf0041274c178a11b6ee92e7870 Mon Sep 17 00:00:00 2001
From: Jani Hautakangas <jani.hautakangas@lge.com>
Date: Wed, 17 Jan 2018 00:19:44 +0200
Subject: [PATCH 4/5] Ozone Wayland IME integration

Introduce Ozone Wayland IME integration. This patch
Ozone Wayland platform implements Linux input method
context service interface and integrates it with
zwp_text_input_v1 protocol.

IME can be enabled by giving --enable-wayland-ime runtime
parameter
---
 ui/ozone/platform/wayland/BUILD.gn                 |   9 +
 ui/ozone/platform/wayland/fake_server.cc           |  98 +++++++++++
 ui/ozone/platform/wayland/fake_server.h            |  34 ++++
 .../platform/wayland/ozone_platform_wayland.cc     |  18 ++
 ui/ozone/platform/wayland/wayland_connection.cc    |  18 ++
 ui/ozone/platform/wayland/wayland_connection.h     |   7 +-
 .../wayland/wayland_input_method_context.cc        | 126 ++++++++++++++
 .../wayland/wayland_input_method_context.h         |  54 ++++++
 ui/ozone/platform/wayland/wayland_object.cc        |  11 ++
 ui/ozone/platform/wayland/wayland_object.h         |  14 ++
 ui/ozone/platform/wayland/wayland_window.cc        |   3 +
 ui/ozone/platform/wayland/wayland_window.h         |   2 +
 ui/ozone/platform/wayland/zwp_text_input_wrapper.h |  50 ++++++
 .../platform/wayland/zwp_text_input_wrapper_v1.cc  | 187 +++++++++++++++++++++
 .../platform/wayland/zwp_text_input_wrapper_v1.h   | 104 ++++++++++++
 ui/ozone/public/ozone_switches.cc                  |   3 +
 ui/ozone/public/ozone_switches.h                   |   2 +
 17 files changed, 739 insertions(+), 1 deletion(-)
 create mode 100644 ui/ozone/platform/wayland/wayland_input_method_context.cc
 create mode 100644 ui/ozone/platform/wayland/wayland_input_method_context.h
 create mode 100644 ui/ozone/platform/wayland/zwp_text_input_wrapper.h
 create mode 100644 ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.cc
 create mode 100644 ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.h

diff --git a/ui/ozone/platform/wayland/BUILD.gn b/ui/ozone/platform/wayland/BUILD.gn
index 3d3b3636435a..95794567165d 100644
--- a/ui/ozone/platform/wayland/BUILD.gn
+++ b/ui/ozone/platform/wayland/BUILD.gn
@@ -22,6 +22,8 @@ source_set("wayland") {
     "wayland_connection.h",
     "wayland_cursor.cc",
     "wayland_cursor.h",
+    "wayland_input_method_context.cc",
+    "wayland_input_method_context.h",
     "wayland_keyboard.cc",
     "wayland_keyboard.h",
     "wayland_object.cc",
@@ -47,6 +49,9 @@ source_set("wayland") {
     "xdg_surface_wrapper_v5.h",
     "xdg_surface_wrapper_v6.cc",
     "xdg_surface_wrapper_v6.h",
+    "zwp_text_input_wrapper.h",
+    "zwp_text_input_wrapper_v1.cc",
+    "zwp_text_input_wrapper_v1.h",
   ]
 
   import("//ui/base/ui_features.gni")
@@ -60,14 +65,17 @@ source_set("wayland") {
 
   deps = [
     "//base",
+    "//services/ui/public/interfaces/ime",
     "//skia",
     "//third_party/wayland:wayland_client",
+    "//third_party/wayland-protocols:text_input_protocol",
     "//third_party/wayland-protocols:xdg_shell_protocol",
     "//ui/base",
     "//ui/base:ui_features",
     "//ui/display/manager",
     "//ui/events",
     "//ui/events:dom_keycode_converter",
+    "//ui/events/keycodes:xkb",
     "//ui/events/ozone:events_ozone",
     "//ui/events/ozone:events_ozone_layout",
     "//ui/events/platform",
@@ -93,6 +101,7 @@ source_set("wayland_unittests") {
     "fake_server.cc",
     "fake_server.h",
     "wayland_connection_unittest.cc",
+    "wayland_input_method_context_unittest.cc",
     "wayland_keyboard_unittest.cc",
     "wayland_pointer_unittest.cc",
     "wayland_surface_factory_unittest.cc",
diff --git a/ui/ozone/platform/wayland/fake_server.cc b/ui/ozone/platform/wayland/fake_server.cc
index cfcf78536a1f..4d8e2844aec6 100644
--- a/ui/ozone/platform/wayland/fake_server.cc
+++ b/ui/ozone/platform/wayland/fake_server.cc
@@ -5,6 +5,7 @@
 #include "ui/ozone/platform/wayland/fake_server.h"
 
 #include <sys/socket.h>
+#include <text-input-unstable-v1-server-protocol.h>
 #include <wayland-server.h>
 #include <xdg-shell-unstable-v5-server-protocol.h>
 #include <xdg-shell-unstable-v6-server-protocol.h>
@@ -22,6 +23,7 @@ const uint32_t kCompositorVersion = 4;
 const uint32_t kOutputVersion = 2;
 const uint32_t kSeatVersion = 4;
 const uint32_t kXdgShellVersion = 1;
+const uint32_t kTextInputManagerVersion = 1;
 
 void DestroyResource(wl_client* client, wl_resource* resource) {
   wl_resource_destroy(resource);
@@ -189,6 +191,84 @@ const struct wl_touch_interface touch_impl = {
     &DestroyResource,  // release
 };
 
+// zwp_text_input_v1
+
+void TextInputV1Activate(wl_client* client,
+                         wl_resource* resource,
+                         wl_resource* seat,
+                         wl_resource* surface) {
+  static_cast<MockZwpTextInput*>(wl_resource_get_user_data(resource))
+      ->Activate(surface);
+}
+
+void TextInputV1Deactivate(wl_client* client,
+                           wl_resource* resource,
+                           wl_resource* seat) {
+  static_cast<MockZwpTextInput*>(wl_resource_get_user_data(resource))
+      ->Deactivate();
+}
+
+void TextInputV1ShowInputPanel(wl_client* client, wl_resource* resource) {
+  static_cast<MockZwpTextInput*>(wl_resource_get_user_data(resource))
+      ->ShowInputPanel();
+}
+
+void TextInputV1HideInputPanel(wl_client* client, wl_resource* resource) {
+  static_cast<MockZwpTextInput*>(wl_resource_get_user_data(resource))
+      ->HideInputPanel();
+}
+
+void TextInputV1Reset(wl_client* client, wl_resource* resource) {
+  static_cast<MockZwpTextInput*>(wl_resource_get_user_data(resource))->Reset();
+}
+
+void TextInputV1SetCursorRectangle(wl_client* client,
+                                   wl_resource* resource,
+                                   int32_t x,
+                                   int32_t y,
+                                   int32_t width,
+                                   int32_t height) {
+  static_cast<MockZwpTextInput*>(wl_resource_get_user_data(resource))
+      ->SetCursorRect(x, y, width, height);
+}
+
+const struct zwp_text_input_v1_interface zwp_text_input_v1_impl = {
+    &TextInputV1Activate,            // activate
+    &TextInputV1Deactivate,          // deactivate
+    &TextInputV1ShowInputPanel,      // show_input_panel
+    &TextInputV1HideInputPanel,      // hide_input_panel
+    &TextInputV1Reset,               // reset
+    nullptr,                         // set_surrounding_text
+    nullptr,                         // set_content_type
+    &TextInputV1SetCursorRectangle,  // set_cursor_rectangle
+    nullptr,                         // set_preferred_language
+    nullptr,                         // commit_state
+    nullptr,                         // invoke_action
+};
+
+// zwp_text_input_manager_v1
+
+void CreateTextInput(struct wl_client* client,
+                     struct wl_resource* resource,
+                     uint32_t id) {
+  auto* im =
+      static_cast<MockTextInputManagerV1*>(wl_resource_get_user_data(resource));
+  wl_resource* text_resource =
+      wl_resource_create(client, &zwp_text_input_v1_interface,
+                         wl_resource_get_version(resource), id);
+  if (!text_resource) {
+    wl_client_post_no_memory(client);
+    return;
+  }
+  im->text_input.reset(
+      new MockZwpTextInput(text_resource, &zwp_text_input_v1_impl));
+}
+
+const struct zwp_text_input_manager_v1_interface
+    zwp_text_input_manager_v1_impl = {
+        &CreateTextInput,  // create_text_input
+};
+
 // xdg_surface, zxdg_surface_v6 and zxdg_toplevel shared methods.
 
 void SetTitle(wl_client* client, wl_resource* resource, const char* title) {
@@ -419,6 +499,15 @@ MockTouch::MockTouch(wl_resource* resource) : ServerObject(resource) {
 
 MockTouch::~MockTouch() {}
 
+MockZwpTextInput::MockZwpTextInput(wl_resource* resource,
+                                   const void* implementation)
+    : ServerObject(resource) {
+  wl_resource_set_implementation(resource, implementation, this,
+                                 &ServerObject::OnResourceDestroyed);
+}
+
+MockZwpTextInput::~MockZwpTextInput() {}
+
 void GlobalDeleter::operator()(wl_global* global) {
   wl_global_destroy(global);
 }
@@ -502,6 +591,13 @@ MockXdgShellV6::MockXdgShellV6()
 
 MockXdgShellV6::~MockXdgShellV6() {}
 
+MockTextInputManagerV1::MockTextInputManagerV1()
+    : Global(&zwp_text_input_manager_v1_interface,
+             &zwp_text_input_manager_v1_impl,
+             kTextInputManagerVersion) {}
+
+MockTextInputManagerV1::~MockTextInputManagerV1() {}
+
 void DisplayDeleter::operator()(wl_display* display) {
   wl_display_destroy(display);
 }
@@ -546,6 +642,8 @@ bool FakeServer::Start(uint32_t shell_version) {
     if (!zxdg_shell_v6_.Initialize(display_.get()))
       return false;
   }
+  if (!zwp_text_input_manager_v1_.Initialize(display_.get()))
+    return false;
 
   client_ = wl_client_create(display_.get(), server_fd.get());
   if (!client_)
diff --git a/ui/ozone/platform/wayland/fake_server.h b/ui/ozone/platform/wayland/fake_server.h
index 5287c68597c7..4e72a38b396e 100644
--- a/ui/ozone/platform/wayland/fake_server.h
+++ b/ui/ozone/platform/wayland/fake_server.h
@@ -128,6 +128,24 @@ class MockTouch : public ServerObject {
   DISALLOW_COPY_AND_ASSIGN(MockTouch);
 };
 
+// Manage zwp_text_input_v1.
+class MockZwpTextInput : public ServerObject {
+ public:
+  MockZwpTextInput(wl_resource* resource, const void* implementation);
+  ~MockZwpTextInput() override;
+
+  MOCK_METHOD0(Reset, void());
+  MOCK_METHOD1(Activate, void(wl_resource* window));
+  MOCK_METHOD0(Deactivate, void());
+  MOCK_METHOD0(ShowInputPanel, void());
+  MOCK_METHOD0(HideInputPanel, void());
+  MOCK_METHOD4(SetCursorRect,
+               void(int32_t x, int32_t y, int32_t width, int32_t height));
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(MockZwpTextInput);
+};
+
 struct GlobalDeleter {
   void operator()(wl_global* global);
 };
@@ -236,6 +254,18 @@ class MockXdgShellV6 : public Global {
   DISALLOW_COPY_AND_ASSIGN(MockXdgShellV6);
 };
 
+// Manage zwp_text_input_manager_v1 object.
+class MockTextInputManagerV1 : public Global {
+ public:
+  MockTextInputManagerV1();
+  ~MockTextInputManagerV1() override;
+
+  std::unique_ptr<MockZwpTextInput> text_input;
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(MockTextInputManagerV1);
+};
+
 struct DisplayDeleter {
   void operator()(wl_display* display);
 };
@@ -268,6 +298,9 @@ class FakeServer : public base::Thread, base::MessagePumpLibevent::Watcher {
   MockSeat* seat() { return &seat_; }
   MockXdgShell* xdg_shell() { return &xdg_shell_; }
   MockOutput* output() { return &output_; }
+  MockTextInputManagerV1* text_input_manager_v1() {
+    return &zwp_text_input_manager_v1_;
+  }
 
  private:
   void DoPause();
@@ -291,6 +324,7 @@ class FakeServer : public base::Thread, base::MessagePumpLibevent::Watcher {
   MockSeat seat_;
   MockXdgShell xdg_shell_;
   MockXdgShellV6 zxdg_shell_v6_;
+  MockTextInputManagerV1 zwp_text_input_manager_v1_;
 
   base::MessagePumpLibevent::FileDescriptorWatcher controller_;
 
diff --git a/ui/ozone/platform/wayland/ozone_platform_wayland.cc b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
index 5de79827a760..27557f58c727 100644
--- a/ui/ozone/platform/wayland/ozone_platform_wayland.cc
+++ b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
@@ -5,6 +5,7 @@
 #include "ui/ozone/platform/wayland/ozone_platform_wayland.h"
 
 #include "base/memory/ptr_util.h"
+#include "mojo/public/cpp/bindings/strong_binding.h"
 #include "ui/base/cursor/ozone/bitmap_cursor_factory_ozone.h"
 #include "ui/base/ui_features.h"
 #include "ui/display/manager/fake_display_delegate.h"
@@ -12,6 +13,7 @@
 #include "ui/events/system_input_injector.h"
 #include "ui/ozone/common/stub_overlay_manager.h"
 #include "ui/ozone/platform/wayland/wayland_connection.h"
+#include "ui/ozone/platform/wayland/wayland_input_method_context.h"
 #include "ui/ozone/platform/wayland/wayland_surface_factory.h"
 #include "ui/ozone/platform/wayland/wayland_window.h"
 #include "ui/ozone/public/gpu_platform_support_host.h"
@@ -123,6 +125,22 @@ class OzonePlatformWayland : public OzonePlatform {
     }
   }
 
+  void AddInterfaces(
+      service_manager::BinderRegistryWithArgs<
+          const service_manager::BindSourceInfo&>* registry) override {
+    registry->AddInterface<ui::mojom::LinuxInputMethodContext>(
+        base::Bind(&OzonePlatformWayland::CreateInputMethodContext,
+                   base::Unretained(this)));
+  }
+
+  void CreateInputMethodContext(
+      ui::mojom::LinuxInputMethodContextRequest request,
+      const service_manager::BindSourceInfo& source_info) {
+    mojo::MakeStrongBinding(
+        std::make_unique<WaylandInputMethodContext>(connection_.get()),
+        std::move(request));
+  }
+
  private:
   std::unique_ptr<WaylandConnection> connection_;
   std::unique_ptr<WaylandSurfaceFactory> surface_factory_;
diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index 9fce25fa3644..b1895dc26b46 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -24,6 +24,7 @@ const uint32_t kMaxCompositorVersion = 4;
 const uint32_t kMaxSeatVersion = 4;
 const uint32_t kMaxShmVersion = 1;
 const uint32_t kMaxXdgShellVersion = 1;
+const uint32_t kMaxTextInputManagerVersion = 1;
 }  // namespace
 
 WaylandConnection::WaylandConnection() : controller_(FROM_HERE) {}
@@ -114,6 +115,15 @@ WaylandWindow* WaylandConnection::GetCurrentFocusedWindow() {
   return nullptr;
 }
 
+WaylandWindow* WaylandConnection::GetCurrentKeyboardFocusedWindow() {
+  for (auto entry : window_map_) {
+    WaylandWindow* window = entry.second;
+    if (window->has_keyboard_focus())
+      return window;
+  }
+  return nullptr;
+}
+
 void WaylandConnection::AddWindow(gfx::AcceleratedWidget widget,
                                   WaylandWindow* window) {
   window_map_[widget] = window;
@@ -249,6 +259,14 @@ void WaylandConnection::Global(void* data,
 
     connection->output_list_.push_back(
         base::WrapUnique(new WaylandOutput(output.release())));
+  } else if (!connection->text_input_manager_v1_ &&
+             strcmp(interface, "zwp_text_input_manager_v1") == 0) {
+    connection->text_input_manager_v1_ = wl::Bind<zwp_text_input_manager_v1>(
+        registry, name, std::min(version, kMaxTextInputManagerVersion));
+    if (!connection->text_input_manager_v1_) {
+      LOG(ERROR) << "Failed to bind to zwp_text_input_manager_v1 global";
+      return;
+    }
   }
 
   connection->ScheduleFlush();
diff --git a/ui/ozone/platform/wayland/wayland_connection.h b/ui/ozone/platform/wayland/wayland_connection.h
index 69b36ffd01c3..8900c78382e4 100644
--- a/ui/ozone/platform/wayland/wayland_connection.h
+++ b/ui/ozone/platform/wayland/wayland_connection.h
@@ -39,9 +39,13 @@ class WaylandConnection : public PlatformEventSource,
   xdg_shell* shell() { return shell_.get(); }
   zxdg_shell_v6* shell_v6() { return shell_v6_.get(); }
   wl_seat* seat() { return seat_.get(); }
+  zwp_text_input_manager_v1* text_input_manager_v1() {
+    return text_input_manager_v1_.get();
+  }
 
   WaylandWindow* GetWindow(gfx::AcceleratedWidget widget);
   WaylandWindow* GetCurrentFocusedWindow();
+  WaylandWindow* GetCurrentKeyboardFocusedWindow();
   void AddWindow(gfx::AcceleratedWidget widget, WaylandWindow* window);
   void RemoveWindow(gfx::AcceleratedWidget widget);
 
@@ -55,6 +59,7 @@ class WaylandConnection : public PlatformEventSource,
                        const gfx::Point& location);
 
   int GetKeyboardModifiers();
+  void DispatchUiEvent(Event* event);
 
   // Resets flags and keyboard modifiers.
   //
@@ -65,7 +70,6 @@ class WaylandConnection : public PlatformEventSource,
 
  private:
   void Flush();
-  void DispatchUiEvent(Event* event);
 
   // PlatformEventSource
   void OnDispatcherListChanged() override;
@@ -102,6 +106,7 @@ class WaylandConnection : public PlatformEventSource,
   wl::Object<wl_shm> shm_;
   wl::Object<xdg_shell> shell_;
   wl::Object<zxdg_shell_v6> shell_v6_;
+  wl::Object<zwp_text_input_manager_v1> text_input_manager_v1_;
 
   std::unique_ptr<WaylandPointer> pointer_;
   std::unique_ptr<WaylandKeyboard> keyboard_;
diff --git a/ui/ozone/platform/wayland/wayland_input_method_context.cc b/ui/ozone/platform/wayland/wayland_input_method_context.cc
new file mode 100644
index 000000000000..2fe8362f590c
--- /dev/null
+++ b/ui/ozone/platform/wayland/wayland_input_method_context.cc
@@ -0,0 +1,126 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/ozone/platform/wayland/wayland_input_method_context.h"
+
+#include "base/bind.h"
+#include "base/command_line.h"
+#include "base/memory/ptr_util.h"
+#include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
+#include "ui/events/base_event_utils.h"
+#include "ui/events/event.h"
+#include "ui/events/keycodes/dom/dom_code.h"
+#include "ui/events/keycodes/dom/keycode_converter.h"
+#include "ui/events/keycodes/keyboard_code_conversion.h"
+#include "ui/events/keycodes/keyboard_code_conversion_xkb.h"
+#include "ui/events/ozone/layout/keyboard_layout_engine.h"
+#include "ui/events/ozone/layout/keyboard_layout_engine_manager.h"
+#include "ui/ozone/platform/wayland/wayland_connection.h"
+#include "ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.h"
+#include "ui/ozone/public/ozone_switches.h"
+
+namespace ui {
+
+const int kXkbKeycodeOffset = 8;
+
+WaylandInputMethodContext::WaylandInputMethodContext(
+    WaylandConnection* connection)
+    : connection_(connection), text_input_(nullptr) {
+  use_ozone_wayland_vkb_ = getenv("ENABLE_WAYLAND_IME") ||
+                           base::CommandLine::ForCurrentProcess()->HasSwitch(
+                               switches::kEnableWaylandIme);
+}
+
+WaylandInputMethodContext::~WaylandInputMethodContext() {
+  if (text_input_) {
+    text_input_->Deactivate();
+    text_input_->HideInputPanel();
+  }
+}
+
+void WaylandInputMethodContext::Initialize(
+    ui::mojom::LinuxInputMethodContextDelegatePtr delegate,
+    bool is_simple) {
+  delegate_ = std::move(delegate);
+  if (use_ozone_wayland_vkb_ && !is_simple &&
+      connection_->text_input_manager_v1()) {
+    text_input_ = std::make_unique<ZWPTextInputWrapperV1>(
+        connection_->text_input_manager_v1());
+    text_input_->Initialize(connection_, this);
+  }
+}
+
+void WaylandInputMethodContext::DispatchKeyEvent(
+    std::unique_ptr<ui::Event> key_event,
+    DispatchKeyEventCallback callback) {
+  const bool handled = false;
+  std::move(callback).Run(handled);
+}
+
+void WaylandInputMethodContext::Reset() {
+  if (text_input_)
+    text_input_->Reset();
+}
+
+void WaylandInputMethodContext::Focus() {
+  if (!text_input_ || !connection_->GetCurrentKeyboardFocusedWindow())
+    return;
+
+  text_input_->Activate(connection_->GetCurrentKeyboardFocusedWindow());
+  text_input_->ShowInputPanel();
+}
+
+void WaylandInputMethodContext::Blur() {
+  if (text_input_) {
+    text_input_->Deactivate();
+    text_input_->HideInputPanel();
+  }
+}
+
+void WaylandInputMethodContext::SetCursorLocation(const gfx::Rect& rect) {
+  if (text_input_)
+    text_input_->SetCursorRect(rect);
+}
+
+void WaylandInputMethodContext::OnPreeditString(const std::string& text,
+                                                int preedit_cursor) {
+  gfx::Range selection_range = gfx::Range::InvalidRange();
+
+  // TODO(jani) Handle selection range
+
+  if (!selection_range.IsValid()) {
+    int cursor_pos = (preedit_cursor) ? text.length() : preedit_cursor;
+    selection_range.set_start(cursor_pos);
+    selection_range.set_end(cursor_pos);
+  }
+
+  ui::CompositionText composition_text;
+  composition_text.text = base::UTF8ToUTF16(text);
+  composition_text.selection = selection_range;
+  delegate_->OnPreeditChanged(composition_text);
+}
+
+void WaylandInputMethodContext::OnCommitString(const std::string& text) {
+  delegate_->OnCommit(base::UTF8ToUTF16(text));
+}
+
+void WaylandInputMethodContext::OnKeysym(uint32_t key,
+                                         uint32_t state,
+                                         uint32_t modifiers) {
+  uint8_t flags = 0;  // for now ignore modifiers
+  DomKey dom_key = NonPrintableXKeySymToDomKey(key);
+  KeyboardCode key_code = NonPrintableDomKeyToKeyboardCode(dom_key);
+  DomCode dom_code =
+      KeycodeConverter::NativeKeycodeToDomCode(key_code + kXkbKeycodeOffset);
+  if (dom_code == ui::DomCode::NONE)
+    return;
+
+  bool down = state == WL_KEYBOARD_KEY_STATE_PRESSED;
+  ui::KeyEvent event(down ? ET_KEY_PRESSED : ET_KEY_RELEASED, key_code,
+                     dom_code, flags, dom_key, EventTimeForNow());
+  connection_->DispatchUiEvent(&event);
+}
+
+}  // namespace ui
diff --git a/ui/ozone/platform/wayland/wayland_input_method_context.h b/ui/ozone/platform/wayland/wayland_input_method_context.h
new file mode 100644
index 000000000000..dc0812a8cc1d
--- /dev/null
+++ b/ui/ozone/platform/wayland/wayland_input_method_context.h
@@ -0,0 +1,54 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_WAYLAND_WAYLAND_INPUT_METHOD_CONTEXT_H_
+#define UI_OZONE_PLATFORM_WAYLAND_WAYLAND_INPUT_METHOD_CONTEXT_H_
+
+#include "base/macros.h"
+#include "services/ui/public/interfaces/ime/linux_input_method_context.mojom.h"
+#include "ui/events/ozone/evdev/event_dispatch_callback.h"
+#include "ui/ozone/platform/wayland/zwp_text_input_wrapper.h"
+
+namespace ui {
+
+class WaylandConnection;
+class WaylandWindow;
+class ZWPTextInputWrapper;
+
+class WaylandInputMethodContext : public ui::mojom::LinuxInputMethodContext,
+                                  public ZWPTextInputWrapperClient {
+ public:
+  explicit WaylandInputMethodContext(WaylandConnection* connection);
+  ~WaylandInputMethodContext() override;
+
+  // ui::mojom::LinuxInputMethodContext.
+  void Initialize(ui::mojom::LinuxInputMethodContextDelegatePtr delegate,
+                  bool is_simple) override;
+  void DispatchKeyEvent(std::unique_ptr<ui::Event> key_event,
+                        DispatchKeyEventCallback callback) override;
+  void SetCursorLocation(const gfx::Rect& rect) override;
+  void Reset() override;
+  void Focus() override;
+  void Blur() override;
+
+  // ui::ZWPTextInputWrapperClient
+  void OnPreeditString(const std::string& text, int preedit_cursor) override;
+  void OnCommitString(const std::string& text) override;
+  void OnKeysym(uint32_t key, uint32_t state, uint32_t modifiers) override;
+
+ private:
+  WaylandConnection* connection_ = nullptr;
+  bool use_ozone_wayland_vkb_;
+
+  std::unique_ptr<ZWPTextInputWrapper> text_input_;
+
+  // Delegate interface back to IME code in ui.
+  ui::mojom::LinuxInputMethodContextDelegatePtr delegate_;
+
+  DISALLOW_COPY_AND_ASSIGN(WaylandInputMethodContext);
+};
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_WAYLAND_WAYLAND_INPUT_METHOD_CONTEXT_H_
diff --git a/ui/ozone/platform/wayland/wayland_object.cc b/ui/ozone/platform/wayland/wayland_object.cc
index 16a346327766..a8e3ec8dd8b8 100644
--- a/ui/ozone/platform/wayland/wayland_object.cc
+++ b/ui/ozone/platform/wayland/wayland_object.cc
@@ -4,6 +4,7 @@
 
 #include "ui/ozone/platform/wayland/wayland_object.h"
 
+#include <text-input-unstable-v1-client-protocol.h>
 #include <wayland-client.h>
 #include <xdg-shell-unstable-v5-client-protocol.h>
 #include <xdg-shell-unstable-v6-client-protocol.h>
@@ -131,4 +132,14 @@ const wl_interface* ObjectTraits<zxdg_positioner_v6>::interface =
 void (*ObjectTraits<zxdg_positioner_v6>::deleter)(zxdg_positioner_v6*) =
     &zxdg_positioner_v6_destroy;
 
+const wl_interface* ObjectTraits<zwp_text_input_manager_v1>::interface =
+    &zwp_text_input_manager_v1_interface;
+void (*ObjectTraits<zwp_text_input_manager_v1>::deleter)(
+    zwp_text_input_manager_v1*) = &zwp_text_input_manager_v1_destroy;
+
+const wl_interface* ObjectTraits<zwp_text_input_v1>::interface =
+    &zwp_text_input_v1_interface;
+void (*ObjectTraits<zwp_text_input_v1>::deleter)(zwp_text_input_v1*) =
+    &zwp_text_input_v1_destroy;
+
 }  // namespace wl
diff --git a/ui/ozone/platform/wayland/wayland_object.h b/ui/ozone/platform/wayland/wayland_object.h
index 4bba61248490..8ed3db972f19 100644
--- a/ui/ozone/platform/wayland/wayland_object.h
+++ b/ui/ozone/platform/wayland/wayland_object.h
@@ -31,6 +31,8 @@ struct zxdg_surface_v6;
 struct zxdg_toplevel_v6;
 struct zxdg_popup_v6;
 struct zxdg_positioner_v6;
+struct zwp_text_input_manager_v1;
+struct zwp_text_input_v1;
 
 namespace wl {
 
@@ -175,6 +177,18 @@ struct ObjectTraits<zxdg_positioner_v6> {
   static void (*deleter)(zxdg_positioner_v6*);
 };
 
+template <>
+struct ObjectTraits<zwp_text_input_manager_v1> {
+  static const wl_interface* interface;
+  static void (*deleter)(zwp_text_input_manager_v1*);
+};
+
+template <>
+struct ObjectTraits<zwp_text_input_v1> {
+  static const wl_interface* interface;
+  static void (*deleter)(zwp_text_input_v1*);
+};
+
 struct Deleter {
   template <typename T>
   void operator()(T* obj) {
diff --git a/ui/ozone/platform/wayland/wayland_window.cc b/ui/ozone/platform/wayland/wayland_window.cc
index 58d7b93266b8..f933aeb52105 100644
--- a/ui/ozone/platform/wayland/wayland_window.cc
+++ b/ui/ozone/platform/wayland/wayland_window.cc
@@ -205,6 +205,9 @@ bool WaylandWindow::HasCapture() {
 }
 
 void WaylandWindow::Show() {
+  if (!is_tooltip_)
+    set_keyboard_focus(true);
+
   if (xdg_surface_)
     return;
   if (is_tooltip_) {
diff --git a/ui/ozone/platform/wayland/wayland_window.h b/ui/ozone/platform/wayland/wayland_window.h
index f053429f8543..8fe4b7cbb259 100644
--- a/ui/ozone/platform/wayland/wayland_window.h
+++ b/ui/ozone/platform/wayland/wayland_window.h
@@ -50,6 +50,8 @@ class WaylandWindow : public PlatformWindow, public PlatformEventDispatcher {
   // Set whether this window has keyboard focus and should dispatch key events.
   void set_keyboard_focus(bool focus) { has_keyboard_focus_ = focus; }
 
+  bool has_keyboard_focus() { return has_keyboard_focus_; }
+
   // Set whether this window has touch focus and should dispatch touch events.
   void set_touch_focus(bool focus) { has_touch_focus_ = focus; }
 
diff --git a/ui/ozone/platform/wayland/zwp_text_input_wrapper.h b/ui/ozone/platform/wayland/zwp_text_input_wrapper.h
new file mode 100644
index 000000000000..a8c8d362e1a7
--- /dev/null
+++ b/ui/ozone/platform/wayland/zwp_text_input_wrapper.h
@@ -0,0 +1,50 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_WAYLAND_ZWP_TEXT_INPUT_WRAPPER_H_
+#define UI_OZONE_PLATFORM_WAYLAND_ZWP_TEXT_INPUT_WRAPPER_H_
+
+#include "ui/ozone/platform/wayland/wayland_object.h"
+
+namespace gfx {
+class Rect;
+}
+
+namespace ui {
+
+class WaylandConnection;
+class WaylandWindow;
+
+class ZWPTextInputWrapperClient {
+ public:
+  virtual ~ZWPTextInputWrapperClient() {}
+
+  virtual void OnPreeditString(const std::string& text,
+                               int32_t preedit_cursor) = 0;
+  virtual void OnCommitString(const std::string& text) = 0;
+  virtual void OnKeysym(uint32_t key, uint32_t state, uint32_t modifiers) = 0;
+};
+
+// A wrapper around different versions of zwp text inputs.
+class ZWPTextInputWrapper {
+ public:
+  virtual ~ZWPTextInputWrapper() {}
+
+  virtual void Initialize(WaylandConnection* connection,
+                          ZWPTextInputWrapperClient* client) = 0;
+
+  virtual void Reset() = 0;
+
+  virtual void Activate(WaylandWindow* window) = 0;
+  virtual void Deactivate() = 0;
+
+  virtual void ShowInputPanel() = 0;
+  virtual void HideInputPanel() = 0;
+
+  virtual void SetCursorRect(const gfx::Rect& rect) = 0;
+};
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_WAYLAND_ZWP_TEXT_INPUT_WRAPPER_H_
diff --git a/ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.cc b/ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.cc
new file mode 100644
index 000000000000..07f10e42b607
--- /dev/null
+++ b/ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.cc
@@ -0,0 +1,187 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.h"
+
+#include "base/memory/ptr_util.h"
+#include "ui/ozone/platform/wayland/wayland_connection.h"
+#include "ui/ozone/platform/wayland/wayland_window.h"
+
+namespace ui {
+
+ZWPTextInputWrapperV1::ZWPTextInputWrapperV1(
+    zwp_text_input_manager_v1* text_input_manager)
+    : client_(0) {
+  static const zwp_text_input_v1_listener text_input_listener = {
+      &ZWPTextInputWrapperV1::OnEnter,         // text_input_enter,
+      &ZWPTextInputWrapperV1::OnLeave,         // text_input_leave,
+      &ZWPTextInputWrapperV1::OnModifiersMap,  // text_input_modifiers_map,
+      &ZWPTextInputWrapperV1::
+          OnInputPanelState,                    // text_input_input_panel_state,
+      &ZWPTextInputWrapperV1::OnPreeditString,  // text_input_preedit_string,
+      &ZWPTextInputWrapperV1::OnPreeditStyling,  // text_input_preedit_styling,
+      &ZWPTextInputWrapperV1::OnPreeditCursor,   // text_input_preedit_cursor,
+      &ZWPTextInputWrapperV1::OnCommitString,    // text_input_commit_string,
+      &ZWPTextInputWrapperV1::OnCursorPosition,  // text_input_cursor_position,
+      &ZWPTextInputWrapperV1::
+          OnDeleteSurroundingText,       // text_input_delete_surrounding_text,
+      &ZWPTextInputWrapperV1::OnKeysym,  // text_input_keysym,
+      &ZWPTextInputWrapperV1::OnLanguage,       // text_input_language,
+      &ZWPTextInputWrapperV1::OnTextDirection,  // text_input_text_direction
+  };
+  ResetInputEventState();
+
+  zwp_text_input_v1* text_input =
+      zwp_text_input_manager_v1_create_text_input(text_input_manager);
+  obj_ = wl::Object<zwp_text_input_v1>(text_input);
+
+  zwp_text_input_v1_add_listener(text_input, &text_input_listener, this);
+}
+
+ZWPTextInputWrapperV1::~ZWPTextInputWrapperV1() {}
+
+void ZWPTextInputWrapperV1::Initialize(WaylandConnection* connection,
+                                       ZWPTextInputWrapperClient* client) {
+  connection_ = connection;
+  client_ = client;
+}
+
+void ZWPTextInputWrapperV1::Reset() {
+  ResetInputEventState();
+  zwp_text_input_v1_reset(obj_.get());
+}
+
+void ZWPTextInputWrapperV1::Activate(WaylandWindow* window) {
+  zwp_text_input_v1_activate(obj_.get(), connection_->seat(),
+                             window->surface());
+}
+
+void ZWPTextInputWrapperV1::Deactivate() {
+  zwp_text_input_v1_deactivate(obj_.get(), connection_->seat());
+}
+
+void ZWPTextInputWrapperV1::ShowInputPanel() {
+  zwp_text_input_v1_show_input_panel(obj_.get());
+}
+
+void ZWPTextInputWrapperV1::HideInputPanel() {
+  zwp_text_input_v1_hide_input_panel(obj_.get());
+}
+
+void ZWPTextInputWrapperV1::SetCursorRect(const gfx::Rect& rect) {
+  zwp_text_input_v1_set_cursor_rectangle(obj_.get(), rect.x(), rect.y(),
+                                         rect.width(), rect.height());
+}
+
+void ZWPTextInputWrapperV1::ResetInputEventState() {
+  preedit_cursor_ = -1;
+}
+
+// zwp_text_input_v1_listener
+
+void ZWPTextInputWrapperV1::OnEnter(void* data,
+                                    struct zwp_text_input_v1* text_input,
+                                    struct wl_surface* surface) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnLeave(void* data,
+                                    struct zwp_text_input_v1* text_input) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnModifiersMap(void* data,
+                                           struct zwp_text_input_v1* text_input,
+                                           struct wl_array* map) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnInputPanelState(
+    void* data,
+    struct zwp_text_input_v1* text_input,
+    uint32_t state) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnPreeditString(
+    void* data,
+    struct zwp_text_input_v1* text_input,
+    uint32_t serial,
+    const char* text,
+    const char* commit) {
+  ZWPTextInputWrapperV1* wti = static_cast<ZWPTextInputWrapperV1*>(data);
+  wti->ResetInputEventState();
+  wti->client_->OnPreeditString(std::string(text), wti->preedit_cursor_);
+}
+
+void ZWPTextInputWrapperV1::OnPreeditStyling(
+    void* data,
+
+    struct zwp_text_input_v1* text_input,
+    uint32_t index,
+    uint32_t length,
+    uint32_t style) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnPreeditCursor(
+    void* data,
+    struct zwp_text_input_v1* text_input,
+    int32_t index) {
+  ZWPTextInputWrapperV1* wti = static_cast<ZWPTextInputWrapperV1*>(data);
+  wti->preedit_cursor_ = index;
+}
+
+void ZWPTextInputWrapperV1::OnCommitString(void* data,
+                                           struct zwp_text_input_v1* text_input,
+                                           uint32_t serial,
+                                           const char* text) {
+  ZWPTextInputWrapperV1* wti = static_cast<ZWPTextInputWrapperV1*>(data);
+  wti->ResetInputEventState();
+  wti->client_->OnCommitString(std::string(text));
+}
+
+void ZWPTextInputWrapperV1::OnCursorPosition(
+    void* data,
+    struct zwp_text_input_v1* text_input,
+    int32_t index,
+    int32_t anchor) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnDeleteSurroundingText(
+    void* data,
+    struct zwp_text_input_v1* text_input,
+    int32_t index,
+    uint32_t length) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnKeysym(void* data,
+                                     struct zwp_text_input_v1* text_input,
+                                     uint32_t serial,
+                                     uint32_t time,
+                                     uint32_t key,
+                                     uint32_t state,
+                                     uint32_t modifiers) {
+  ZWPTextInputWrapperV1* wti = static_cast<ZWPTextInputWrapperV1*>(data);
+  wti->client_->OnKeysym(key, state, modifiers);
+}
+
+void ZWPTextInputWrapperV1::OnLanguage(void* data,
+                                       struct zwp_text_input_v1* text_input,
+                                       uint32_t serial,
+                                       const char* language) {
+  NOTIMPLEMENTED_LOG_ONCE();
+}
+
+void ZWPTextInputWrapperV1::OnTextDirection(
+    void* data,
+    struct zwp_text_input_v1* text_input,
+    uint32_t serial,
+    uint32_t direction) {
+  // Not implemented
+}
+
+}  // namespace ui
diff --git a/ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.h b/ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.h
new file mode 100644
index 000000000000..330c1b1ff78f
--- /dev/null
+++ b/ui/ozone/platform/wayland/zwp_text_input_wrapper_v1.h
@@ -0,0 +1,104 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_WAYLAND_ZWP_TEXT_INPUT_WRAPPER_V1_H_
+#define UI_OZONE_PLATFORM_WAYLAND_ZWP_TEXT_INPUT_WRAPPER_V1_H_
+
+#include <text-input-unstable-v1-client-protocol.h>
+#include <string>
+
+#include "ui/ozone/platform/wayland/zwp_text_input_wrapper.h"
+
+namespace gfx {
+class Rect;
+}
+
+namespace ui {
+
+class WaylandConnection;
+class WaylandWindow;
+
+class ZWPTextInputWrapperV1 : public ZWPTextInputWrapper {
+ public:
+  ZWPTextInputWrapperV1(zwp_text_input_manager_v1* text_input_manager);
+  ~ZWPTextInputWrapperV1() override;
+
+  void Initialize(WaylandConnection* connection,
+                  ZWPTextInputWrapperClient* client) override;
+
+  void Reset() override;
+
+  void Activate(WaylandWindow* window) override;
+  void Deactivate() override;
+
+  void ShowInputPanel() override;
+  void HideInputPanel() override;
+
+  void SetCursorRect(const gfx::Rect& rect) override;
+
+ private:
+  void ResetInputEventState();
+
+  // zwp_text_input_v1_listener
+  static void OnEnter(void* data,
+                      struct zwp_text_input_v1* text_input,
+                      struct wl_surface* surface);
+  static void OnLeave(void* data, struct zwp_text_input_v1* text_input);
+  static void OnModifiersMap(void* data,
+                             struct zwp_text_input_v1* text_input,
+                             struct wl_array* map);
+  static void OnInputPanelState(void* data,
+                                struct zwp_text_input_v1* text_input,
+                                uint32_t state);
+  static void OnPreeditString(void* data,
+                              struct zwp_text_input_v1* text_input,
+                              uint32_t serial,
+                              const char* text,
+                              const char* commit);
+  static void OnPreeditStyling(void* data,
+                               struct zwp_text_input_v1* text_input,
+                               uint32_t index,
+                               uint32_t length,
+                               uint32_t style);
+  static void OnPreeditCursor(void* data,
+                              struct zwp_text_input_v1* text_input,
+                              int32_t index);
+  static void OnCommitString(void* data,
+                             struct zwp_text_input_v1* text_input,
+                             uint32_t serial,
+                             const char* text);
+  static void OnCursorPosition(void* data,
+                               struct zwp_text_input_v1* text_input,
+                               int32_t index,
+                               int32_t anchor);
+  static void OnDeleteSurroundingText(void* data,
+                                      struct zwp_text_input_v1* text_input,
+                                      int32_t index,
+                                      uint32_t length);
+  static void OnKeysym(void* data,
+                       struct zwp_text_input_v1* text_input,
+                       uint32_t serial,
+                       uint32_t time,
+                       uint32_t key,
+                       uint32_t state,
+                       uint32_t modifiers);
+  static void OnLanguage(void* data,
+                         struct zwp_text_input_v1* text_input,
+                         uint32_t serial,
+                         const char* language);
+  static void OnTextDirection(void* data,
+                              struct zwp_text_input_v1* text_input,
+                              uint32_t serial,
+                              uint32_t direction);
+
+  WaylandConnection* connection_ = nullptr;
+  wl::Object<zwp_text_input_v1> obj_;
+  ZWPTextInputWrapperClient* client_;
+
+  int32_t preedit_cursor_;
+};
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_WAYLAND_ZWP_TEXT_INPUT_WRAPPER_V1_H_
diff --git a/ui/ozone/public/ozone_switches.cc b/ui/ozone/public/ozone_switches.cc
index 4669cfa471a8..8c4c022887cc 100644
--- a/ui/ozone/public/ozone_switches.cc
+++ b/ui/ozone/public/ozone_switches.cc
@@ -20,4 +20,7 @@ const char kEnableDrmAtomic[] = "enable-drm-atomic";
 // communication.
 const char kEnableDrmMojo[] = "enable-drm-mojo";
 
+// Try to enable wayland input method editor.
+const char kEnableWaylandIme[] = "enable-wayland-ime";
+
 }  // namespace switches
diff --git a/ui/ozone/public/ozone_switches.h b/ui/ozone/public/ozone_switches.h
index b8360e803e46..cc079097db54 100644
--- a/ui/ozone/public/ozone_switches.h
+++ b/ui/ozone/public/ozone_switches.h
@@ -18,6 +18,8 @@ OZONE_BASE_EXPORT extern const char kEnableDrmAtomic[];
 
 OZONE_BASE_EXPORT extern const char kEnableDrmMojo[];
 
+OZONE_BASE_EXPORT extern const char kEnableWaylandIme[];
+
 }  // namespace switches
 
 #endif  // UI_OZONE_PUBLIC_OZONE_SWITCHES_H_
-- 
2.11.0

