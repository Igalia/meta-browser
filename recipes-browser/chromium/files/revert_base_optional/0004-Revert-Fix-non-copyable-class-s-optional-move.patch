From 9149cb258e334965fb396e317498f320441ff786 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Wed, 7 Feb 2018 15:48:55 +0200
Subject: [PATCH 4/5] Revert "Fix non-copyable class's optional move."

This reverts commit f1c8789c71dbdaeeef98ecd52c9715495824e6b0.
---
 base/optional.h           | 24 ++-------------
 base/optional_unittest.cc | 74 ++++-------------------------------------------
 2 files changed, 9 insertions(+), 89 deletions(-)

diff --git a/base/optional.h b/base/optional.h
index 34e36fabebd6..f6619a575815 100644
--- a/base/optional.h
+++ b/base/optional.h
@@ -44,15 +44,6 @@ struct OptionalStorageBase {
 
   // When T is not trivially destructible we must call its
   // destructor before deallocating its memory.
-  // Note that this hides the (implicitly declared) move constructor, which
-  // would be used for constexpr move constructor in OptionalStorage<T>.
-  // It is needed iff T is trivially move constructible. However, the current
-  // is_trivially_{copy,move}_constructible implementation requires
-  // is_trivially_destructible (which looks a bug, cf:
-  // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51452 and
-  // http://cplusplus.github.io/LWG/lwg-active.html#2116), so it is not
-  // necessary for this case at the moment. Please see also the destructor
-  // comment in "is_trivially_destructible = true" specialization below.
   ~OptionalStorageBase() {
     if (!is_null_)
       value_.~T();
@@ -86,18 +77,9 @@ struct OptionalStorageBase<T, true /* trivially destructible */> {
       : is_null_(false), value_(std::forward<Args>(args)...) {}
 
   // When T is trivially destructible (i.e. its destructor does nothing) there
-  // is no need to call it. Implicitly defined destructor is trivial, because
-  // both members (bool and union containing only variants which are trivially
-  // destructible) are trivially destructible.
-  // Explicitly-defaulted destructor is also trivial, but do not use it here,
-  // because it hides the implicit move constructor. It is needed to implement
-  // constexpr move constructor in OptionalStorage iff T is trivially move
-  // constructible. Note that, if T is trivially move constructible, the move
-  // constructor of OptionalStorageBase<T> is also implicitly defined and it is
-  // trivially move constructor. If T is not trivially move constructible,
-  // "not declaring move constructor without destructor declaration" here means
-  // "delete move constructor", which works because any move constructor of
-  // OptionalStorage will not refer to it in that case.
+  // is no need to call it. Explicitly defaulting the destructor means it's not
+  // user-provided. Those two together make this destructor trivial.
+  ~OptionalStorageBase() = default;
 
   template <class... Args>
   void Init(Args&&... args) {
diff --git a/base/optional_unittest.cc b/base/optional_unittest.cc
index 7cc05ef2987d..91e63e75d0db 100644
--- a/base/optional_unittest.cc
+++ b/base/optional_unittest.cc
@@ -115,35 +115,6 @@ class DeletedDefaultConstructor {
   int foo_;
 };
 
-class DeletedCopyConstructor {
- public:
-  explicit DeletedCopyConstructor(int foo) : foo_(foo) {}
-  DeletedCopyConstructor(const DeletedCopyConstructor&) = delete;
-  DeletedCopyConstructor(DeletedCopyConstructor&&) = default;
-
-  int foo() const { return foo_; }
-
- private:
-  int foo_;
-};
-
-class NonTriviallyDestructibleDeletedCopyConstructor {
- public:
-  explicit NonTriviallyDestructibleDeletedCopyConstructor(int foo)
-      : foo_(foo) {}
-  NonTriviallyDestructibleDeletedCopyConstructor(
-      const NonTriviallyDestructibleDeletedCopyConstructor&) = delete;
-  NonTriviallyDestructibleDeletedCopyConstructor(
-      NonTriviallyDestructibleDeletedCopyConstructor&&) = default;
-
-  ~NonTriviallyDestructibleDeletedCopyConstructor() {}
-
-  int foo() const { return foo_; }
-
- private:
-  int foo_;
-};
-
 class DeleteNewOperators {
  public:
   void* operator new(size_t) = delete;
@@ -198,15 +169,6 @@ TEST(OptionalTest, CopyConstructor) {
   }
 
   {
-    const Optional<std::string> first("foo");
-    Optional<std::string> other(first);
-
-    EXPECT_TRUE(other);
-    EXPECT_EQ(other.value(), "foo");
-    EXPECT_EQ(first, other);
-  }
-
-  {
     Optional<TestObject> first(TestObject(3, 0.1));
     Optional<TestObject> other(first);
 
@@ -248,57 +210,33 @@ TEST(OptionalTest, MoveConstructor) {
     constexpr Optional<float> first(0.1f);
     constexpr Optional<float> second(std::move(first));
 
-    EXPECT_TRUE(second.has_value());
+    EXPECT_TRUE(second);
     EXPECT_EQ(second.value(), 0.1f);
 
-    EXPECT_TRUE(first.has_value());
+    EXPECT_TRUE(first);
   }
 
   {
     Optional<std::string> first("foo");
     Optional<std::string> second(std::move(first));
 
-    EXPECT_TRUE(second.has_value());
+    EXPECT_TRUE(second);
     EXPECT_EQ("foo", second.value());
 
-    EXPECT_TRUE(first.has_value());
+    EXPECT_TRUE(first);
   }
 
   {
     Optional<TestObject> first(TestObject(3, 0.1));
     Optional<TestObject> second(std::move(first));
 
-    EXPECT_TRUE(second.has_value());
+    EXPECT_TRUE(!!second);
     EXPECT_EQ(TestObject::State::MOVE_CONSTRUCTED, second->state());
     EXPECT_TRUE(TestObject(3, 0.1) == second.value());
 
-    EXPECT_TRUE(first.has_value());
+    EXPECT_TRUE(!!first);
     EXPECT_EQ(TestObject::State::MOVED_FROM, first->state());
   }
-
-  // Even if copy constructor is deleted, move constructor needs to work.
-  // Note that it couldn't be constexpr.
-  {
-    Optional<DeletedCopyConstructor> first(in_place, 42);
-    Optional<DeletedCopyConstructor> second(std::move(first));
-
-    EXPECT_TRUE(second.has_value());
-    EXPECT_EQ(42, second->foo());
-
-    EXPECT_TRUE(first.has_value());
-  }
-
-  {
-    Optional<NonTriviallyDestructibleDeletedCopyConstructor> first(in_place,
-                                                                   42);
-    Optional<NonTriviallyDestructibleDeletedCopyConstructor> second(
-        std::move(first));
-
-    EXPECT_TRUE(second.has_value());
-    EXPECT_EQ(42, second->foo());
-
-    EXPECT_TRUE(first.has_value());
-  }
 }
 
 TEST(OptionalTest, MoveValueConstructor) {
-- 
2.11.0

