From eebb60c768bde4c8307b382c05634443f35dd6f4 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Wed, 7 Feb 2018 15:48:30 +0200
Subject: [PATCH 1/5] Revert "Implement converting constructors from
 Optional<U>."

This reverts commit d39417a581d92178fea880cc5e4768e17db265f9.
---
 base/BUILD.gn             |  1 -
 base/optional.h           | 78 +----------------------------------------------
 base/optional_unittest.cc | 59 -----------------------------------
 base/optional_unittest.nc | 49 -----------------------------
 4 files changed, 1 insertion(+), 186 deletions(-)
 delete mode 100644 base/optional_unittest.nc

diff --git a/base/BUILD.gn b/base/BUILD.gn
index c466beb86da3..5241767dbff6 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -2579,7 +2579,6 @@ if (enable_nocompile_tests) {
       "memory/weak_ptr_unittest.nc",
       "metrics/field_trial_params_unittest.nc",
       "metrics/histogram_unittest.nc",
-      "optional_unittest.nc",
       "strings/string16_unittest.nc",
       "task_scheduler/task_traits_unittest.nc",
     ]
diff --git a/base/optional.h b/base/optional.h
index 8e56ca640bb0..dc7753908754 100644
--- a/base/optional.h
+++ b/base/optional.h
@@ -30,10 +30,6 @@ constexpr in_place_t in_place = {};
 // http://en.cppreference.com/w/cpp/utility/optional/nullopt
 constexpr nullopt_t nullopt(0);
 
-// Forward declaration, which is refered by following helpers.
-template <typename T>
-class Optional;
-
 namespace internal {
 
 template <typename T, bool = std::is_trivially_destructible<T>::value>
@@ -223,19 +219,6 @@ class OptionalBase {
   constexpr explicit OptionalBase(in_place_t, Args&&... args)
       : storage_(in_place, std::forward<Args>(args)...) {}
 
-  // Implementation of converting constructors.
-  template <typename U>
-  explicit OptionalBase(const OptionalBase<U>& other) {
-    if (other.storage_.is_populated_)
-      storage_.Init(other.storage_.value_);
-  }
-
-  template <typename U>
-  explicit OptionalBase(OptionalBase<U>&& other) {
-    if (other.storage_.is_populated_)
-      storage_.Init(std::move(other.storage_.value_));
-  }
-
   ~OptionalBase() = default;
 
   OptionalBase& operator=(const OptionalBase& other) {
@@ -279,11 +262,6 @@ class OptionalBase {
     storage_.is_populated_ = false;
   }
 
-  // For implementing conversion, allow access to other typed OptionalBase
-  // class.
-  template <typename U>
-  friend class OptionalBase;
-
   OptionalStorage<T> storage_;
 };
 
@@ -339,20 +317,6 @@ struct MoveAssignable<false> {
   MoveAssignable& operator=(MoveAssignable&&) = delete;
 };
 
-// Helper to conditionally enable converting constructors.
-template <typename T, typename U>
-struct IsConvertibleFromOptional
-    : std::integral_constant<
-          bool,
-          std::is_constructible<T, Optional<U>&>::value ||
-              std::is_constructible<T, const Optional<U>&>::value ||
-              std::is_constructible<T, Optional<U>&&>::value ||
-              std::is_constructible<T, const Optional<U>&&>::value ||
-              std::is_convertible<Optional<U>&, T>::value ||
-              std::is_convertible<const Optional<U>&, T>::value ||
-              std::is_convertible<Optional<U>&&, T>::value ||
-              std::is_convertible<const Optional<U>&&, T>::value> {};
-
 }  // namespace internal
 
 // base::Optional is a Chromium version of the C++17 optional class:
@@ -383,47 +347,7 @@ class Optional
   constexpr Optional(const Optional& other) = default;
   constexpr Optional(Optional&& other) = default;
 
-  constexpr Optional(nullopt_t) {}  // NOLINT(runtime/explicit)
-
-  // Converting copy constructor. "explicit" only if
-  // std::is_convertible<const U&, T>::value is false. It is implemented by
-  // declaring two almost same constructors, but that condition in enable_if_t
-  // is different, so that either one is chosen, thanks to SFINAE.
-  template <
-      typename U,
-      std::enable_if_t<std::is_constructible<T, const U&>::value &&
-                           !internal::IsConvertibleFromOptional<T, U>::value &&
-                           std::is_convertible<const U&, T>::value,
-                       bool> = false>
-  Optional(const Optional<U>& other) : internal::OptionalBase<T>(other) {}
-
-  template <
-      typename U,
-      std::enable_if_t<std::is_constructible<T, const U&>::value &&
-                           !internal::IsConvertibleFromOptional<T, U>::value &&
-                           !std::is_convertible<const U&, T>::value,
-                       bool> = false>
-  explicit Optional(const Optional<U>& other)
-      : internal::OptionalBase<T>(other) {}
-
-  // Converting move constructor. Similar to converting copy constructor,
-  // declaring two (explicit and non-explicit) constructors.
-  template <
-      typename U,
-      std::enable_if_t<std::is_constructible<T, U&&>::value &&
-                           !internal::IsConvertibleFromOptional<T, U>::value &&
-                           std::is_convertible<U&&, T>::value,
-                       bool> = false>
-  Optional(Optional<U>&& other) : internal::OptionalBase<T>(std::move(other)) {}
-
-  template <
-      typename U,
-      std::enable_if_t<std::is_constructible<T, U&&>::value &&
-                           !internal::IsConvertibleFromOptional<T, U>::value &&
-                           !std::is_convertible<U&&, T>::value,
-                       bool> = false>
-  explicit Optional(Optional<U>&& other)
-      : internal::OptionalBase<T>(std::move(other)) {}
+  constexpr Optional(nullopt_t) {}
 
   constexpr Optional(const T& value)
       : internal::OptionalBase<T>(in_place, value) {}
diff --git a/base/optional_unittest.cc b/base/optional_unittest.cc
index da3ac2da9439..09f3106bfa7f 100644
--- a/base/optional_unittest.cc
+++ b/base/optional_unittest.cc
@@ -364,65 +364,6 @@ TEST(OptionalTest, MoveValueConstructor) {
   }
 }
 
-TEST(OptionalTest, ConvertingCopyConstructor) {
-  {
-    Optional<int> first(1);
-    Optional<double> second(first);
-    EXPECT_TRUE(second.has_value());
-    EXPECT_EQ(1.0, second.value());
-  }
-
-  // Make sure explicit is not marked for convertible case.
-  {
-    Optional<int> o(1);
-    ignore_result<Optional<double>>(o);
-  }
-}
-
-TEST(OptionalTest, ConvertingMoveConstructor) {
-  {
-    Optional<int> first(1);
-    Optional<double> second(std::move(first));
-    EXPECT_TRUE(second.has_value());
-    EXPECT_EQ(1.0, second.value());
-  }
-
-  // Make sure explicit is not marked for convertible case.
-  {
-    Optional<int> o(1);
-    ignore_result<Optional<double>>(std::move(o));
-  }
-
-  {
-    class Test1 {
-     public:
-      explicit Test1(int foo) : foo_(foo) {}
-
-      int foo() const { return foo_; }
-
-     private:
-      int foo_;
-    };
-
-    // Not copyable but convertible from Test1.
-    class Test2 {
-     public:
-      Test2(const Test2&) = delete;
-      explicit Test2(Test1&& other) : bar_(other.foo()) {}
-
-      double bar() const { return bar_; }
-
-     private:
-      double bar_;
-    };
-
-    Optional<Test1> first(in_place, 42);
-    Optional<Test2> second(std::move(first));
-    EXPECT_TRUE(second.has_value());
-    EXPECT_EQ(42.0, second->bar());
-  }
-}
-
 TEST(OptionalTest, ConstructorForwardArguments) {
   {
     constexpr Optional<float> a(base::in_place, 0.1f);
diff --git a/base/optional_unittest.nc b/base/optional_unittest.nc
deleted file mode 100644
index eca324a00885..000000000000
--- a/base/optional_unittest.nc
+++ /dev/null
@@ -1,49 +0,0 @@
-// Copyright 2018 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// This is a "No Compile Test" suite.
-// http://dev.chromium.org/developers/testing/no-compile-tests
-
-#include <type_traits>
-
-#include "base/optional.h"
-
-namespace base {
-
-#if defined(NCTEST_EXPLICIT_CONVERTING_COPY_CONSTRUCTOR)  // [r"fatal error: no matching function for call to object of type"]
-
-// Optional<T>(const Optional<U>& arg) constructor is marked explicit if
-// T is not convertible from "const U&".
-void WontCompile() {
-  struct Test {
-    // Declares as explicit so that Test is still constructible from int,
-    // but not convertible.
-    explicit Test(int a) {}
-  };
-
-  static_assert(!std::is_convertible<const int&, Test>::value,
-                "const int& to Test is convertible");
-  const Optional<int> arg(in_place, 1);
-  ([](Optional<Test> param) {})(arg);
-}
-
-#elif defined(NCTEST_EXPLICIT_CONVERTING_MOVE_CONSTRUCTOR)  // [r"fatal error: no matching function for call to object of type"]
-
-// Optional<T>(Optional<U>&& arg) constructor is marked explicit if
-// T is not convertible from "U&&".
-void WontCompile() {
-  struct Test {
-    // Declares as explicit so that Test is still constructible from int,
-    // but not convertible.
-    explicit Test(int a) {}
-  };
-
-  static_assert(!std::is_convertible<int&&, Test>::value,
-                "int&& to Test is convertible");
-  ([](Optional<Test> param) {})(Optional<int>(in_place, 1));
-}
-
-#endif
-
-}  // namespace base
-- 
2.11.0

