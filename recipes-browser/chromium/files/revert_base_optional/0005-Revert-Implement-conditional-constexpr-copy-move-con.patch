From e04ec1dc7390cbfd66818d8a26ab5d261ae5571d Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Wed, 7 Feb 2018 15:51:08 +0200
Subject: [PATCH 5/5] Revert "Implement conditional constexpr copy-/move-
 constructors."

This reverts commit 5134ab38ad1ef0344106eea8e75c19df3f271954.
---
 base/optional.h           | 154 +++++++++++-----------------------------------
 base/optional_unittest.cc |   8 +--
 2 files changed, 39 insertions(+), 123 deletions(-)

diff --git a/base/optional.h b/base/optional.h
index f6619a575815..7e039c6fcbbd 100644
--- a/base/optional.h
+++ b/base/optional.h
@@ -33,29 +33,22 @@ constexpr nullopt_t nullopt(0);
 namespace internal {
 
 template <typename T, bool = std::is_trivially_destructible<T>::value>
-struct OptionalStorageBase {
+struct OptionalStorage {
   // Initializing |empty_| here instead of using default member initializing
   // to avoid errors in g++ 4.8.
-  constexpr OptionalStorageBase() : empty_('\0') {}
+  constexpr OptionalStorage() : empty_('\0') {}
 
   template <class... Args>
-  constexpr explicit OptionalStorageBase(in_place_t, Args&&... args)
+  constexpr explicit OptionalStorage(in_place_t, Args&&... args)
       : is_null_(false), value_(std::forward<Args>(args)...) {}
 
   // When T is not trivially destructible we must call its
   // destructor before deallocating its memory.
-  ~OptionalStorageBase() {
+  ~OptionalStorage() {
     if (!is_null_)
       value_.~T();
   }
 
-  template <class... Args>
-  void Init(Args&&... args) {
-    DCHECK(is_null_);
-    ::new (&value_) T(std::forward<Args>(args)...);
-    is_null_ = false;
-  }
-
   bool is_null_ = true;
   union {
     // |empty_| exists so that the union will always be initialized, even when
@@ -67,26 +60,19 @@ struct OptionalStorageBase {
 };
 
 template <typename T>
-struct OptionalStorageBase<T, true /* trivially destructible */> {
+struct OptionalStorage<T, true> {
   // Initializing |empty_| here instead of using default member initializing
   // to avoid errors in g++ 4.8.
-  constexpr OptionalStorageBase() : empty_('\0') {}
+  constexpr OptionalStorage() : empty_('\0') {}
 
   template <class... Args>
-  constexpr explicit OptionalStorageBase(in_place_t, Args&&... args)
+  constexpr explicit OptionalStorage(in_place_t, Args&&... args)
       : is_null_(false), value_(std::forward<Args>(args)...) {}
 
   // When T is trivially destructible (i.e. its destructor does nothing) there
   // is no need to call it. Explicitly defaulting the destructor means it's not
   // user-provided. Those two together make this destructor trivial.
-  ~OptionalStorageBase() = default;
-
-  template <class... Args>
-  void Init(Args&&... args) {
-    DCHECK(is_null_);
-    ::new (&value_) T(std::forward<Args>(args)...);
-    is_null_ = false;
-  }
+  ~OptionalStorage() = default;
 
   bool is_null_ = true;
   union {
@@ -98,93 +84,6 @@ struct OptionalStorageBase<T, true /* trivially destructible */> {
   };
 };
 
-// Implement conditional constexpr copy and move constructors. These are
-// constexpr if is_trivially_{copy,move}_constructible<T>::value is true
-// respectively. If each is true, the corresponding constructor is defined as
-// "= default;", which generates a constexpr constructor (In this case,
-// the condition of constexpr-ness is satisfied because the base class also has
-// compiler generated constexpr {copy,move} constructors). Note that
-// placement-new is prohibited in constexpr.
-template <typename T,
-          bool = std::is_trivially_copy_constructible<T>::value,
-          bool = std::is_trivially_move_constructible<T>::value>
-struct OptionalStorage : OptionalStorageBase<T> {
-  // This is no trivially {copy,move} constructible case. Other cases are
-  // defined below as specializations.
-
-  // Accessing the members of template base class requires explicit
-  // declaration.
-  using OptionalStorageBase<T>::is_null_;
-  using OptionalStorageBase<T>::value_;
-  using OptionalStorageBase<T>::Init;
-
-  // Inherit constructors (specifically, the in_place constructor).
-  using OptionalStorageBase<T>::OptionalStorageBase;
-
-  // User defined constructor deletes the default constructor.
-  // Define it explicitly.
-  OptionalStorage() = default;
-
-  OptionalStorage(const OptionalStorage& other) {
-    if (!other.is_null_)
-      Init(other.value_);
-  }
-
-  OptionalStorage(OptionalStorage&& other) {
-    if (!other.is_null_)
-      Init(std::move(other.value_));
-  }
-};
-
-template <typename T>
-struct OptionalStorage<T,
-                       true /* trivially copy constructible */,
-                       false /* trivially move constructible */>
-    : OptionalStorageBase<T> {
-  using OptionalStorageBase<T>::is_null_;
-  using OptionalStorageBase<T>::value_;
-  using OptionalStorageBase<T>::Init;
-  using OptionalStorageBase<T>::OptionalStorageBase;
-
-  OptionalStorage() = default;
-  OptionalStorage(const OptionalStorage& other) = default;
-
-  OptionalStorage(OptionalStorage&& other) {
-    if (!other.is_null_)
-      Init(std::move(other.value_));
-  }
-};
-
-template <typename T>
-struct OptionalStorage<T,
-                       false /* trivially copy constructible */,
-                       true /* trivially move constructible */>
-    : OptionalStorageBase<T> {
-  using OptionalStorageBase<T>::is_null_;
-  using OptionalStorageBase<T>::value_;
-  using OptionalStorageBase<T>::Init;
-  using OptionalStorageBase<T>::OptionalStorageBase;
-
-  OptionalStorage() = default;
-  OptionalStorage(OptionalStorage&& other) = default;
-
-  OptionalStorage(const OptionalStorage& other) {
-    if (!other.is_null_)
-      Init(other.value_);
-  }
-};
-
-template <typename T>
-struct OptionalStorage<T,
-                       true /* trivially copy constructible */,
-                       true /* trivially move constructible */>
-    : OptionalStorageBase<T> {
-  // If both trivially {copy,move} constructible are true, it is not necessary
-  // to use user-defined constructors. So, just inheriting constructors
-  // from the base class works.
-  using OptionalStorageBase<T>::OptionalStorageBase;
-};
-
 // Base class to support conditionally usable copy-/move- constructors
 // and assign operators.
 template <typename T>
@@ -194,8 +93,17 @@ class OptionalBase {
   // because of C++ language restriction.
  protected:
   constexpr OptionalBase() = default;
-  constexpr OptionalBase(const OptionalBase& other) = default;
-  constexpr OptionalBase(OptionalBase&& other) = default;
+
+  // TODO(dcheng): Make these constexpr iff T is trivially constructible.
+  OptionalBase(const OptionalBase& other) {
+    if (!other.storage_.is_null_)
+      Init(other.storage_.value_);
+  }
+
+  OptionalBase(OptionalBase&& other) {
+    if (!other.storage_.is_null_)
+      Init(std::move(other.storage_.value_));
+  }
 
   template <class... Args>
   constexpr explicit OptionalBase(in_place_t, Args&&... args)
@@ -223,16 +131,23 @@ class OptionalBase {
     return *this;
   }
 
+  template <class... Args>
+  void Init(Args&&... args) {
+    DCHECK(storage_.is_null_);
+    ::new (&storage_.value_) T(std::forward<Args>(args)...);
+    storage_.is_null_ = false;
+  }
+
   void InitOrAssign(const T& value) {
     if (storage_.is_null_)
-      storage_.Init(value);
+      Init(value);
     else
       storage_.value_ = value;
   }
 
   void InitOrAssign(T&& value) {
     if (storage_.is_null_)
-      storage_.Init(std::move(value));
+      Init(std::move(value));
     else
       storage_.value_ = std::move(value);
   }
@@ -268,8 +183,8 @@ class Optional : public internal::OptionalBase<T> {
   // Defer default/copy/move constructor implementation to OptionalBase.
   // TODO(hidehiko): Implement conditional enabling.
   constexpr Optional() = default;
-  constexpr Optional(const Optional& other) = default;
-  constexpr Optional(Optional&& other) = default;
+  Optional(const Optional& other) = default;
+  Optional(Optional&& other) = default;
 
   constexpr Optional(nullopt_t) {}
 
@@ -384,10 +299,10 @@ class Optional : public internal::OptionalBase<T> {
 
     if (storage_.is_null_ != other.storage_.is_null_) {
       if (storage_.is_null_) {
-        storage_.Init(std::move(other.storage_.value_));
+        Init(std::move(other.storage_.value_));
         other.FreeIfNeeded();
       } else {
-        other.storage_.Init(std::move(storage_.value_));
+        other.Init(std::move(storage_.value_));
         FreeIfNeeded();
       }
       return;
@@ -405,7 +320,7 @@ class Optional : public internal::OptionalBase<T> {
   template <class... Args>
   void emplace(Args&&... args) {
     FreeIfNeeded();
-    storage_.Init(std::forward<Args>(args)...);
+    Init(std::forward<Args>(args)...);
   }
 
   template <
@@ -416,7 +331,7 @@ class Optional : public internal::OptionalBase<T> {
                                                      Args...>::value>>
   T& emplace(std::initializer_list<U> il, Args&&... args) {
     FreeIfNeeded();
-    storage_.Init(il, std::forward<Args>(args)...);
+    Init(il, std::forward<Args>(args)...);
     return storage_.value_;
   }
 
@@ -424,6 +339,7 @@ class Optional : public internal::OptionalBase<T> {
   // Accessing template base class's protected member needs explicit
   // declaration to do so.
   using internal::OptionalBase<T>::FreeIfNeeded;
+  using internal::OptionalBase<T>::Init;
   using internal::OptionalBase<T>::InitOrAssign;
   using internal::OptionalBase<T>::storage_;
 };
diff --git a/base/optional_unittest.cc b/base/optional_unittest.cc
index 91e63e75d0db..60347d5e613d 100644
--- a/base/optional_unittest.cc
+++ b/base/optional_unittest.cc
@@ -151,8 +151,8 @@ TEST(OptionalTest, DefaultConstructor) {
 
 TEST(OptionalTest, CopyConstructor) {
   {
-    constexpr Optional<float> first(0.1f);
-    constexpr Optional<float> other(first);
+    Optional<float> first(0.1f);
+    Optional<float> other(first);
 
     EXPECT_TRUE(other);
     EXPECT_EQ(other.value(), 0.1f);
@@ -207,8 +207,8 @@ TEST(OptionalTest, ValueConstructor) {
 
 TEST(OptionalTest, MoveConstructor) {
   {
-    constexpr Optional<float> first(0.1f);
-    constexpr Optional<float> second(std::move(first));
+    Optional<float> first(0.1f);
+    Optional<float> second(std::move(first));
 
     EXPECT_TRUE(second);
     EXPECT_EQ(second.value(), 0.1f);
-- 
2.11.0

