From cf105646f9c576a39ce67eb8a47650791b4d8a2c Mon Sep 17 00:00:00 2001
From: Antonio Gomes <tonikitoo@igalia.com>
Date: Mon, 13 Jun 2016 10:40:27 -0400
Subject: [PATCH 3/5] Port files changed in Ozone/Wayland in order to build
 content_shell

Namely, these were files changes:

- ui/platform_window/platform_window.h
- ui/platform_window/platform_window_delegate.h
---
 ui/platform_window/platform_window.h          | 34 +++++++++++++++++++++++++++
 ui/platform_window/platform_window_delegate.h | 18 ++++++++++++++
 2 files changed, 52 insertions(+)

diff --git a/ui/platform_window/platform_window.h b/ui/platform_window/platform_window.h
index f22a48c..970b515 100644
--- a/ui/platform_window/platform_window.h
+++ b/ui/platform_window/platform_window.h
@@ -9,11 +9,14 @@
 
 #include "base/strings/string16.h"
 #include "ui/base/cursor/cursor.h"
+#include "ui/gfx/native_widget_types.h"
 
 namespace gfx {
 class Rect;
 }
 
+class SkPath;
+
 namespace ui {
 
 class PlatformImeController;
@@ -24,8 +27,39 @@ class PlatformImeController;
 // underlying platform windowing system (i.e. X11/Win/OSX).
 class PlatformWindow {
  public:
+  enum PlatformWindowType {
+    PLATFORM_WINDOW_UNKNOWN,
+    PLATFORM_WINDOW_TYPE_TOOLTIP,
+    PLATFORM_WINDOW_TYPE_POPUP,
+    PLATFORM_WINDOW_TYPE_MENU,
+    PLATFORM_WINDOW_TYPE_BUBBLE,
+    PLATFORM_WINDOW_TYPE_WINDOW,
+    PLATFORM_WINDOW_TYPE_WINDOW_FRAMELESS
+  };
+
   virtual ~PlatformWindow() {}
 
+  virtual void InitPlatformWindow(PlatformWindowType type,
+                                  gfx::AcceleratedWidget parent_window) { }
+  virtual void SetWindowShape(const SkPath& path) { }
+  virtual void SetOpacity(unsigned char opacity) { }
+
+  // Asks the GPU process to send data of type |mime_type|.
+  virtual void RequestDragData(const std::string& mime_type) { }
+  virtual void RequestSelectionData(const std::string& mime_type) { }
+
+  // Indicates to the drag source that the data will or will not be accepted
+  // at the current (x, y) coordinates. Note that there is a harmless race here.
+  // The browser process could decide to accept or reject the data based on
+  // old (x, y) coordinates that have since been updated by a new DragMotion
+  // event in the GPU process. This doesn't matter because the browser process
+  // will promptly correct the matter by calling one of these functions again
+  // when it receives the DragMotion event, and these functions are only used to
+  // provide user feedback: they don't affect correctness.
+  virtual void DragWillBeAccepted(uint32_t serial,
+                                  const std::string& mime_type) { }
+  virtual void DragWillBeRejected(uint32_t serial) { }
+
   virtual void Show() = 0;
   virtual void Hide() = 0;
   virtual void Close() = 0;
diff --git a/ui/platform_window/platform_window_delegate.h b/ui/platform_window/platform_window_delegate.h
index f7cdb1a..9efc821 100644
--- a/ui/platform_window/platform_window_delegate.h
+++ b/ui/platform_window/platform_window_delegate.h
@@ -5,6 +5,8 @@
 #ifndef UI_PLATFORM_WINDOW_PLATFORM_WINDOW_DELEGATE_H_
 #define UI_PLATFORM_WINDOW_PLATFORM_WINDOW_DELEGATE_H_
 
+#include <vector>
+
 #include "ui/gfx/native_widget_types.h"
 
 namespace gfx {
@@ -51,6 +53,22 @@ class PlatformWindowDelegate {
   virtual void OnAcceleratedWidgetDestroyed() = 0;
 
   virtual void OnActivationChanged(bool active) = 0;
+
+  virtual void OnDragEnter(unsigned windowhandle,
+                           float x,
+                           float y,
+                           const std::vector<std::string>& mime_types,
+                           uint32_t serial) { }
+
+  virtual void OnDragDataReceived(int fd) { }
+
+  virtual void OnDragLeave() { }
+
+  virtual void OnDragMotion(float x,
+                            float y,
+                            uint32_t time) { }
+
+  virtual void OnDragDrop() { }
 };
 
 }  // namespace ui
-- 
2.7.4

