From 995fc5d010ab82b671e26b26e2fe5de466946574 Mon Sep 17 00:00:00 2001
From: Antonio Gomes <tonikitoo@igalia.com>
Date: Fri, 9 Dec 2016 07:34:11 -0400
Subject: [PATCH] Get chrome running with wayland (sw and hw w/
 --in-process-gpu

---
 .../views/chrome_browser_main_extra_parts_views.cc |  5 +-
 .../browser_desktop_window_tree_host_ozone.cc      | 56 +++++++++++++++++++++-
 .../frame/browser_desktop_window_tree_host_ozone.h | 46 ++++++++++++++++++
 .../views/frame/desktop_browser_frame_auralinux.cc |  6 +++
 .../frame/native_browser_frame_factory_ozone.cc    |  4 +-
 5 files changed, 112 insertions(+), 5 deletions(-)
 create mode 100644 chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.h

diff --git a/chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc b/chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc
index 981b6ef..5815070 100644
--- a/chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc
+++ b/chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc
@@ -55,8 +55,11 @@ void ChromeBrowserMainExtraPartsViews::ToolkitInitialized() {
 }
 
 void ChromeBrowserMainExtraPartsViews::PreCreateThreads() {
-#if defined(USE_AURA) && !defined(OS_CHROMEOS) && !defined(USE_OZONE)
+#if defined(USE_AURA) && !defined(OS_CHROMEOS)
   // The screen may have already been set in test initialization.
+  if (service_manager::ServiceManagerIsRemote())
+    return;
+
   if (!display::Screen::GetScreen())
     display::Screen::SetScreenInstance(views::CreateDesktopScreen());
 #endif
diff --git a/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.cc b/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.cc
index 20ed0fb..eb7e836 100644
--- a/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.cc
+++ b/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.cc
@@ -4,6 +4,7 @@
 
 #include "base/logging.h"
 #include "chrome/browser/ui/views/frame/browser_desktop_window_tree_host.h"
+#include "chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.h"
 
 ////////////////////////////////////////////////////////////////////////////////
 // BrowserDesktopWindowTreeHost, public:
@@ -15,6 +16,57 @@ BrowserDesktopWindowTreeHost::CreateBrowserDesktopWindowTreeHost(
     views::DesktopNativeWidgetAura* desktop_native_widget_aura,
     BrowserView* browser_view,
     BrowserFrame* browser_frame) {
-  NOTREACHED();
-  return nullptr;
+  return new BrowserDesktopWindowTreeHostOzone(native_widget_delegate,
+                                               desktop_native_widget_aura,
+                                               browser_view,
+                                               browser_frame);
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// BrowserDesktopWindowTreeHostOzone, public:
+
+BrowserDesktopWindowTreeHostOzone::BrowserDesktopWindowTreeHostOzone(
+    views::internal::NativeWidgetDelegate* native_widget_delegate,
+    views::DesktopNativeWidgetAura* desktop_native_widget_aura,
+    BrowserView* browser_view,
+    BrowserFrame* browser_frame)
+    : DesktopWindowTreeHostOzone(native_widget_delegate,
+                                   desktop_native_widget_aura),
+      browser_view_(browser_view) {
+}
+
+BrowserDesktopWindowTreeHostOzone::~BrowserDesktopWindowTreeHostOzone() {
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// BrowserDesktopWindowTreeHostOzone,
+//     BrowserDesktopWindowTreeHost implementation:
+
+views::DesktopWindowTreeHost*
+    BrowserDesktopWindowTreeHostOzone::AsDesktopWindowTreeHost() {
+  return this;
+}
+
+int BrowserDesktopWindowTreeHostOzone::GetMinimizeButtonOffset() const {
+  return 0;
+}
+
+bool BrowserDesktopWindowTreeHostOzone::UsesNativeSystemMenu() const {
+  return false;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// BrowserDesktopWindowTreeHostOzone,
+//     views::DesktopWindowTreeHostOzone implementation:
+
+void BrowserDesktopWindowTreeHostOzone::Init(
+    aura::Window* content_window,
+    const views::Widget::InitParams& params) {
+  views::DesktopWindowTreeHostOzone::Init(content_window, params);
+
+  // TODO(kalyan): Support for Global Menu.
+}
+
+void BrowserDesktopWindowTreeHostOzone::CloseNow() {
+  views::DesktopWindowTreeHostOzone::CloseNow();
 }
diff --git a/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.h b/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.h
new file mode 100644
index 0000000..180c53b
--- /dev/null
+++ b/chrome/browser/ui/views/frame/browser_desktop_window_tree_host_ozone.h
@@ -0,0 +1,46 @@
+// Copyright (c) 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_VIEWS_FRAME_BROWSER_DESKTOP_ROOT_WINDOW_HOST_OZONE_H_
+#define CHROME_BROWSER_UI_VIEWS_FRAME_BROWSER_DESKTOP_ROOT_WINDOW_HOST_OZONE_H_
+
+//#include "ozone/ui/desktop_aura/desktop_window_tree_host_ozone.h"
+#include "ui/views/widget/desktop_aura/desktop_window_tree_host_ozone_wayland.h"
+#include "chrome/browser/ui/views/frame/browser_desktop_window_tree_host.h"
+
+class BrowserFrame;
+class BrowserView;
+
+namespace views {
+class DesktopNativeWidgetAura;
+}
+
+class BrowserDesktopWindowTreeHostOzone
+    : public BrowserDesktopWindowTreeHost,
+      public views::DesktopWindowTreeHostOzone {
+ public:
+  BrowserDesktopWindowTreeHostOzone(
+      views::internal::NativeWidgetDelegate* native_widget_delegate,
+      views::DesktopNativeWidgetAura* desktop_native_widget_aura,
+      BrowserView* browser_view,
+      BrowserFrame* browser_frame);
+  ~BrowserDesktopWindowTreeHostOzone() override;
+
+ private:
+  // Overridden from BrowserDesktopWindowTreeHost:
+  DesktopWindowTreeHost* AsDesktopWindowTreeHost() override;
+  int GetMinimizeButtonOffset() const override;
+  bool UsesNativeSystemMenu() const override;
+
+  // Overridden from views::DesktopWindowTreeHostOzone:
+  void Init(aura::Window* content_window,
+            const views::Widget::InitParams& params) override;
+  void CloseNow() override;
+
+  BrowserView* browser_view_;
+
+  DISALLOW_COPY_AND_ASSIGN(BrowserDesktopWindowTreeHostOzone);
+};
+
+#endif
diff --git a/chrome/browser/ui/views/frame/desktop_browser_frame_auralinux.cc b/chrome/browser/ui/views/frame/desktop_browser_frame_auralinux.cc
index 1b180fa..3356d3d 100644
--- a/chrome/browser/ui/views/frame/desktop_browser_frame_auralinux.cc
+++ b/chrome/browser/ui/views/frame/desktop_browser_frame_auralinux.cc
@@ -16,11 +16,13 @@ DesktopBrowserFrameAuraLinux::DesktopBrowserFrameAuraLinux(
     BrowserFrame* browser_frame,
     BrowserView* browser_view)
     : DesktopBrowserFrameAura(browser_frame, browser_view) {
+#if defined(USE_X11)
   use_custom_frame_pref_.Init(
       prefs::kUseCustomChromeFrame,
       browser_view->browser()->profile()->GetPrefs(),
       base::Bind(&DesktopBrowserFrameAuraLinux::OnUseCustomChromeFrameChanged,
                  base::Unretained(this)));
+#endif
 }
 
 DesktopBrowserFrameAuraLinux::~DesktopBrowserFrameAuraLinux() {
@@ -53,8 +55,12 @@ views::Widget::InitParams DesktopBrowserFrameAuraLinux::GetWidgetParams() {
 }
 
 bool DesktopBrowserFrameAuraLinux::UseCustomFrame() const {
+#if defined(USE_X11)
   return use_custom_frame_pref_.GetValue() &&
       browser_view()->IsBrowserTypeNormal();
+#else
+  return false;
+#endif
 }
 
 void DesktopBrowserFrameAuraLinux::OnUseCustomChromeFrameChanged() {
diff --git a/chrome/browser/ui/views/frame/native_browser_frame_factory_ozone.cc b/chrome/browser/ui/views/frame/native_browser_frame_factory_ozone.cc
index 09124dc..5d2d369 100644
--- a/chrome/browser/ui/views/frame/native_browser_frame_factory_ozone.cc
+++ b/chrome/browser/ui/views/frame/native_browser_frame_factory_ozone.cc
@@ -5,6 +5,7 @@
 #include "chrome/browser/ui/views/frame/native_browser_frame_factory.h"
 
 #include "chrome/browser/ui/views/frame/browser_frame_mus.h"
+#include "chrome/browser/ui/views/frame/desktop_browser_frame_auralinux.h"
 #include "services/service_manager/runner/common/client_util.h"
 
 NativeBrowserFrame* NativeBrowserFrameFactory::Create(
@@ -13,6 +14,5 @@ NativeBrowserFrame* NativeBrowserFrameFactory::Create(
   if (service_manager::ServiceManagerIsRemote())
     return new BrowserFrameMus(browser_frame, browser_view);
 
-  NOTREACHED() << "For Ozone builds, only --mash launch is supported for now.";
-  return nullptr;
+  return new DesktopBrowserFrameAuraLinux(browser_frame, browser_view);
 }
-- 
2.7.4

