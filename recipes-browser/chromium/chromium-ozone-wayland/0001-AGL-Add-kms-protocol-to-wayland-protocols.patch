From 06713db8aadfca0ccfd8d21b6d157f44f6c46aa7 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Wed, 20 Feb 2019 15:47:49 +0200
Subject: [PATCH 1/2] AGL: Add kms protocol to wayland-protocols.

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
 third_party/wayland-protocols/BUILD.gn             |  17 ++
 .../include/protocol/wayland-kms-client-protocol.h | 267 +++++++++++++++++++++
 .../include/protocol/wayland-kms-server-protocol.h | 253 +++++++++++++++++++
 .../protocol/wayland-kms-protocol.c                |  76 ++++++
 ui/ozone/platform/wayland/BUILD.gn                 |   1 +
 5 files changed, 614 insertions(+)
 create mode 100644 third_party/wayland-protocols/include/protocol/wayland-kms-client-protocol.h
 create mode 100644 third_party/wayland-protocols/include/protocol/wayland-kms-server-protocol.h
 create mode 100644 third_party/wayland-protocols/protocol/wayland-kms-protocol.c

diff --git a/third_party/wayland-protocols/BUILD.gn b/third_party/wayland-protocols/BUILD.gn
index 3a931ce038..585e89fef7 100644
--- a/third_party/wayland-protocols/BUILD.gn
+++ b/third_party/wayland-protocols/BUILD.gn
@@ -47,6 +47,23 @@ source_set("linux_dmabuf_protocol") {
   public_configs = [ ":linux_dmabuf_protocol_config" ]
 }
 
+config("wayland_kms_protocol_config") {
+  include_dirs = [ "include/protocol" ]
+}
+
+source_set("wayland_kms_protocol") {
+  sources = [
+    "include/protocol/wayland-kms-client-protocol.h",
+    "include/protocol/wayland-kms-server-protocol.h",
+    "protocol/wayland-kms-protocol.c",
+  ]
+
+  configs -= [ "//build/config/compiler:chromium_code" ]
+  configs += [ "//build/config/compiler:no_chromium_code" ]
+
+  public_configs = [ ":wayland_kms_protocol_config" ]
+}
+
 config("viewporter_protocol_config") {
   include_dirs = [ "include/protocol" ]
 }
diff --git a/third_party/wayland-protocols/include/protocol/wayland-kms-client-protocol.h b/third_party/wayland-protocols/include/protocol/wayland-kms-client-protocol.h
new file mode 100644
index 0000000000..6ff55869f8
--- /dev/null
+++ b/third_party/wayland-protocols/include/protocol/wayland-kms-client-protocol.h
@@ -0,0 +1,267 @@
+/* Generated by wayland-scanner 1.13.0 */
+
+#ifndef KMS_CLIENT_PROTOCOL_H
+#define KMS_CLIENT_PROTOCOL_H
+
+#include <stdint.h>
+#include <stddef.h>
+#include "wayland-client.h"
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+/**
+ * @page page_kms The kms protocol
+ * @section page_ifaces_kms Interfaces
+ * - @subpage page_iface_wl_kms - 
+ * @section page_copyright_kms Copyright
+ * <pre>
+ *
+ * Copyright © 2013 Renesas Solutions Corp.
+ *
+ * Based on wayland-drm.xml:
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2010-2011 Intel Corporation
+ *
+ * Permission to use, copy, modify, distribute, and sell this
+ * software and its documentation for any purpose is hereby granted
+ * without fee, provided that\n the above copyright notice appear in
+ * all copies and that both that copyright notice and this permission
+ * notice appear in supporting documentation, and that the name of
+ * the copyright holders not be used in advertising or publicity
+ * pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no
+ * representations about the suitability of this software for any
+ * purpose.  It is provided "as is" without express or implied
+ * warranty.
+ *
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
+ * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
+ * THIS SOFTWARE.
+ * </pre>
+ */
+struct wl_buffer;
+struct wl_kms;
+
+/**
+ * @page page_iface_wl_kms wl_kms
+ * @section page_iface_wl_kms_api API
+ * See @ref iface_wl_kms.
+ */
+/**
+ * @defgroup iface_wl_kms The wl_kms interface
+ */
+extern const struct wl_interface wl_kms_interface;
+
+#ifndef WL_KMS_ERROR_ENUM
+#define WL_KMS_ERROR_ENUM
+enum wl_kms_error {
+	WL_KMS_ERROR_INVALID_FORMAT = 0,
+	WL_KMS_ERROR_INVALID_FD = 1,
+	WL_KMS_ERROR_INVALID_HANDLE = 2,
+	WL_KMS_ERROR_AUTHENTICATION_FAILED = 3,
+};
+#endif /* WL_KMS_ERROR_ENUM */
+
+#ifndef WL_KMS_FORMAT_ENUM
+#define WL_KMS_FORMAT_ENUM
+enum wl_kms_format {
+	WL_KMS_FORMAT_C8 = 0x20203843,
+	WL_KMS_FORMAT_RGB332 = 0x38424752,
+	WL_KMS_FORMAT_BGR233 = 0x38524742,
+	WL_KMS_FORMAT_XRGB4444 = 0x32315258,
+	WL_KMS_FORMAT_XBGR4444 = 0x32314258,
+	WL_KMS_FORMAT_RGBX4444 = 0x32315852,
+	WL_KMS_FORMAT_BGRX4444 = 0x32315842,
+	WL_KMS_FORMAT_ARGB4444 = 0x32315241,
+	WL_KMS_FORMAT_ABGR4444 = 0x32314241,
+	WL_KMS_FORMAT_RGBA4444 = 0x32314152,
+	WL_KMS_FORMAT_BGRA4444 = 0x32314142,
+	WL_KMS_FORMAT_XRGB1555 = 0x35315258,
+	WL_KMS_FORMAT_XBGR1555 = 0x35314258,
+	WL_KMS_FORMAT_RGBX5551 = 0x35315852,
+	WL_KMS_FORMAT_BGRX5551 = 0x35315842,
+	WL_KMS_FORMAT_ARGB1555 = 0x35315241,
+	WL_KMS_FORMAT_ABGR1555 = 0x35314241,
+	WL_KMS_FORMAT_RGBA5551 = 0x35314152,
+	WL_KMS_FORMAT_BGRA5551 = 0x35314142,
+	WL_KMS_FORMAT_RGB565 = 0x36314752,
+	WL_KMS_FORMAT_BGR565 = 0x36314742,
+	WL_KMS_FORMAT_RGB888 = 0x34324752,
+	WL_KMS_FORMAT_BGR888 = 0x34324742,
+	WL_KMS_FORMAT_XRGB8888 = 0x34325258,
+	WL_KMS_FORMAT_XBGR8888 = 0x34324258,
+	WL_KMS_FORMAT_RGBX8888 = 0x34325852,
+	WL_KMS_FORMAT_BGRX8888 = 0x34325842,
+	WL_KMS_FORMAT_ARGB8888 = 0x34325241,
+	WL_KMS_FORMAT_ABGR8888 = 0x34324241,
+	WL_KMS_FORMAT_RGBA8888 = 0x34324152,
+	WL_KMS_FORMAT_BGRA8888 = 0x34324142,
+	WL_KMS_FORMAT_XRGB2101010 = 0x30335258,
+	WL_KMS_FORMAT_XBGR2101010 = 0x30334258,
+	WL_KMS_FORMAT_RGBX1010102 = 0x30335852,
+	WL_KMS_FORMAT_BGRX1010102 = 0x30335842,
+	WL_KMS_FORMAT_ARGB2101010 = 0x30335241,
+	WL_KMS_FORMAT_ABGR2101010 = 0x30334241,
+	WL_KMS_FORMAT_RGBA1010102 = 0x30334152,
+	WL_KMS_FORMAT_BGRA1010102 = 0x30334142,
+	WL_KMS_FORMAT_YUYV = 0x56595559,
+	WL_KMS_FORMAT_YVYU = 0x55595659,
+	WL_KMS_FORMAT_UYVY = 0x59565955,
+	WL_KMS_FORMAT_VYUY = 0x59555956,
+	WL_KMS_FORMAT_AYUV = 0x56555941,
+	WL_KMS_FORMAT_NV12 = 0x3231564e,
+	WL_KMS_FORMAT_NV21 = 0x3132564e,
+	WL_KMS_FORMAT_NV16 = 0x3631564e,
+	WL_KMS_FORMAT_NV61 = 0x3136564e,
+	WL_KMS_FORMAT_YUV410 = 0x39565559,
+	WL_KMS_FORMAT_YVU410 = 0x39555659,
+	WL_KMS_FORMAT_YUV411 = 0x31315559,
+	WL_KMS_FORMAT_YVU411 = 0x31315659,
+	WL_KMS_FORMAT_YUV420 = 0x32315559,
+	WL_KMS_FORMAT_YVU420 = 0x32315659,
+	WL_KMS_FORMAT_YUV422 = 0x36315559,
+	WL_KMS_FORMAT_YVU422 = 0x36315659,
+	WL_KMS_FORMAT_YUV444 = 0x34325559,
+	WL_KMS_FORMAT_YVU444 = 0x34325659,
+};
+#endif /* WL_KMS_FORMAT_ENUM */
+
+/**
+ * @ingroup iface_wl_kms
+ * @struct wl_kms_listener
+ */
+struct wl_kms_listener {
+	/**
+	 */
+	void (*device)(void *data,
+		       struct wl_kms *wl_kms,
+		       const char *name);
+	/**
+	 */
+	void (*format)(void *data,
+		       struct wl_kms *wl_kms,
+		       uint32_t format);
+	/**
+	 */
+	void (*authenticated)(void *data,
+			      struct wl_kms *wl_kms);
+};
+
+/**
+ * @ingroup iface_wl_kms
+ */
+static inline int
+wl_kms_add_listener(struct wl_kms *wl_kms,
+		    const struct wl_kms_listener *listener, void *data)
+{
+	return wl_proxy_add_listener((struct wl_proxy *) wl_kms,
+				     (void (**)(void)) listener, data);
+}
+
+#define WL_KMS_AUTHENTICATE 0
+#define WL_KMS_CREATE_BUFFER 1
+#define WL_KMS_CREATE_MP_BUFFER 2
+
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_DEVICE_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_FORMAT_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_AUTHENTICATED_SINCE_VERSION 1
+
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_AUTHENTICATE_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_CREATE_BUFFER_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_CREATE_MP_BUFFER_SINCE_VERSION 2
+
+/** @ingroup iface_wl_kms */
+static inline void
+wl_kms_set_user_data(struct wl_kms *wl_kms, void *user_data)
+{
+	wl_proxy_set_user_data((struct wl_proxy *) wl_kms, user_data);
+}
+
+/** @ingroup iface_wl_kms */
+static inline void *
+wl_kms_get_user_data(struct wl_kms *wl_kms)
+{
+	return wl_proxy_get_user_data((struct wl_proxy *) wl_kms);
+}
+
+static inline uint32_t
+wl_kms_get_version(struct wl_kms *wl_kms)
+{
+	return wl_proxy_get_version((struct wl_proxy *) wl_kms);
+}
+
+/** @ingroup iface_wl_kms */
+static inline void
+wl_kms_destroy(struct wl_kms *wl_kms)
+{
+	wl_proxy_destroy((struct wl_proxy *) wl_kms);
+}
+
+/**
+ * @ingroup iface_wl_kms
+ */
+static inline void
+wl_kms_authenticate(struct wl_kms *wl_kms, uint32_t magic)
+{
+	wl_proxy_marshal((struct wl_proxy *) wl_kms,
+			 WL_KMS_AUTHENTICATE, magic);
+}
+
+/**
+ * @ingroup iface_wl_kms
+ */
+static inline struct wl_buffer *
+wl_kms_create_buffer(struct wl_kms *wl_kms, int32_t fd, int32_t width, int32_t height, uint32_t stride, uint32_t format, uint32_t handle)
+{
+	struct wl_proxy *id;
+
+	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_kms,
+			 WL_KMS_CREATE_BUFFER, &wl_buffer_interface, NULL, fd, width, height, stride, format, handle);
+
+	return (struct wl_buffer *) id;
+}
+
+/**
+ * @ingroup iface_wl_kms
+ */
+static inline struct wl_buffer *
+wl_kms_create_mp_buffer(struct wl_kms *wl_kms, int32_t width, int32_t height, uint32_t format, int32_t fd0, uint32_t stride0, int32_t fd1, uint32_t stride1, int32_t fd2, uint32_t stride2)
+{
+	struct wl_proxy *id;
+
+	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_kms,
+			 WL_KMS_CREATE_MP_BUFFER, &wl_buffer_interface, NULL, width, height, format, fd0, stride0, fd1, stride1, fd2, stride2);
+
+	return (struct wl_buffer *) id;
+}
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif
diff --git a/third_party/wayland-protocols/include/protocol/wayland-kms-server-protocol.h b/third_party/wayland-protocols/include/protocol/wayland-kms-server-protocol.h
new file mode 100644
index 0000000000..16e27f2b4b
--- /dev/null
+++ b/third_party/wayland-protocols/include/protocol/wayland-kms-server-protocol.h
@@ -0,0 +1,253 @@
+/* Generated by wayland-scanner 1.13.0 */
+
+#ifndef KMS_SERVER_PROTOCOL_H
+#define KMS_SERVER_PROTOCOL_H
+
+#include <stdint.h>
+#include <stddef.h>
+#include "wayland-server.h"
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+struct wl_client;
+struct wl_resource;
+
+/**
+ * @page page_kms The kms protocol
+ * @section page_ifaces_kms Interfaces
+ * - @subpage page_iface_wl_kms - 
+ * @section page_copyright_kms Copyright
+ * <pre>
+ *
+ * Copyright © 2013 Renesas Solutions Corp.
+ *
+ * Based on wayland-drm.xml:
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2010-2011 Intel Corporation
+ *
+ * Permission to use, copy, modify, distribute, and sell this
+ * software and its documentation for any purpose is hereby granted
+ * without fee, provided that\n the above copyright notice appear in
+ * all copies and that both that copyright notice and this permission
+ * notice appear in supporting documentation, and that the name of
+ * the copyright holders not be used in advertising or publicity
+ * pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no
+ * representations about the suitability of this software for any
+ * purpose.  It is provided "as is" without express or implied
+ * warranty.
+ *
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
+ * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
+ * THIS SOFTWARE.
+ * </pre>
+ */
+struct wl_buffer;
+struct wl_kms;
+
+/**
+ * @page page_iface_wl_kms wl_kms
+ * @section page_iface_wl_kms_api API
+ * See @ref iface_wl_kms.
+ */
+/**
+ * @defgroup iface_wl_kms The wl_kms interface
+ */
+extern const struct wl_interface wl_kms_interface;
+
+#ifndef WL_KMS_ERROR_ENUM
+#define WL_KMS_ERROR_ENUM
+enum wl_kms_error {
+	WL_KMS_ERROR_INVALID_FORMAT = 0,
+	WL_KMS_ERROR_INVALID_FD = 1,
+	WL_KMS_ERROR_INVALID_HANDLE = 2,
+	WL_KMS_ERROR_AUTHENTICATION_FAILED = 3,
+};
+#endif /* WL_KMS_ERROR_ENUM */
+
+#ifndef WL_KMS_FORMAT_ENUM
+#define WL_KMS_FORMAT_ENUM
+enum wl_kms_format {
+	WL_KMS_FORMAT_C8 = 0x20203843,
+	WL_KMS_FORMAT_RGB332 = 0x38424752,
+	WL_KMS_FORMAT_BGR233 = 0x38524742,
+	WL_KMS_FORMAT_XRGB4444 = 0x32315258,
+	WL_KMS_FORMAT_XBGR4444 = 0x32314258,
+	WL_KMS_FORMAT_RGBX4444 = 0x32315852,
+	WL_KMS_FORMAT_BGRX4444 = 0x32315842,
+	WL_KMS_FORMAT_ARGB4444 = 0x32315241,
+	WL_KMS_FORMAT_ABGR4444 = 0x32314241,
+	WL_KMS_FORMAT_RGBA4444 = 0x32314152,
+	WL_KMS_FORMAT_BGRA4444 = 0x32314142,
+	WL_KMS_FORMAT_XRGB1555 = 0x35315258,
+	WL_KMS_FORMAT_XBGR1555 = 0x35314258,
+	WL_KMS_FORMAT_RGBX5551 = 0x35315852,
+	WL_KMS_FORMAT_BGRX5551 = 0x35315842,
+	WL_KMS_FORMAT_ARGB1555 = 0x35315241,
+	WL_KMS_FORMAT_ABGR1555 = 0x35314241,
+	WL_KMS_FORMAT_RGBA5551 = 0x35314152,
+	WL_KMS_FORMAT_BGRA5551 = 0x35314142,
+	WL_KMS_FORMAT_RGB565 = 0x36314752,
+	WL_KMS_FORMAT_BGR565 = 0x36314742,
+	WL_KMS_FORMAT_RGB888 = 0x34324752,
+	WL_KMS_FORMAT_BGR888 = 0x34324742,
+	WL_KMS_FORMAT_XRGB8888 = 0x34325258,
+	WL_KMS_FORMAT_XBGR8888 = 0x34324258,
+	WL_KMS_FORMAT_RGBX8888 = 0x34325852,
+	WL_KMS_FORMAT_BGRX8888 = 0x34325842,
+	WL_KMS_FORMAT_ARGB8888 = 0x34325241,
+	WL_KMS_FORMAT_ABGR8888 = 0x34324241,
+	WL_KMS_FORMAT_RGBA8888 = 0x34324152,
+	WL_KMS_FORMAT_BGRA8888 = 0x34324142,
+	WL_KMS_FORMAT_XRGB2101010 = 0x30335258,
+	WL_KMS_FORMAT_XBGR2101010 = 0x30334258,
+	WL_KMS_FORMAT_RGBX1010102 = 0x30335852,
+	WL_KMS_FORMAT_BGRX1010102 = 0x30335842,
+	WL_KMS_FORMAT_ARGB2101010 = 0x30335241,
+	WL_KMS_FORMAT_ABGR2101010 = 0x30334241,
+	WL_KMS_FORMAT_RGBA1010102 = 0x30334152,
+	WL_KMS_FORMAT_BGRA1010102 = 0x30334142,
+	WL_KMS_FORMAT_YUYV = 0x56595559,
+	WL_KMS_FORMAT_YVYU = 0x55595659,
+	WL_KMS_FORMAT_UYVY = 0x59565955,
+	WL_KMS_FORMAT_VYUY = 0x59555956,
+	WL_KMS_FORMAT_AYUV = 0x56555941,
+	WL_KMS_FORMAT_NV12 = 0x3231564e,
+	WL_KMS_FORMAT_NV21 = 0x3132564e,
+	WL_KMS_FORMAT_NV16 = 0x3631564e,
+	WL_KMS_FORMAT_NV61 = 0x3136564e,
+	WL_KMS_FORMAT_YUV410 = 0x39565559,
+	WL_KMS_FORMAT_YVU410 = 0x39555659,
+	WL_KMS_FORMAT_YUV411 = 0x31315559,
+	WL_KMS_FORMAT_YVU411 = 0x31315659,
+	WL_KMS_FORMAT_YUV420 = 0x32315559,
+	WL_KMS_FORMAT_YVU420 = 0x32315659,
+	WL_KMS_FORMAT_YUV422 = 0x36315559,
+	WL_KMS_FORMAT_YVU422 = 0x36315659,
+	WL_KMS_FORMAT_YUV444 = 0x34325559,
+	WL_KMS_FORMAT_YVU444 = 0x34325659,
+};
+#endif /* WL_KMS_FORMAT_ENUM */
+
+/**
+ * @ingroup iface_wl_kms
+ * @struct wl_kms_interface
+ */
+struct wl_kms_interface {
+	/**
+	 */
+	void (*authenticate)(struct wl_client *client,
+			     struct wl_resource *resource,
+			     uint32_t magic);
+	/**
+	 */
+	void (*create_buffer)(struct wl_client *client,
+			      struct wl_resource *resource,
+			      uint32_t id,
+			      int32_t fd,
+			      int32_t width,
+			      int32_t height,
+			      uint32_t stride,
+			      uint32_t format,
+			      uint32_t handle);
+	/**
+	 * @param width Width
+	 * @param height Height
+	 * @param format Pixelformat
+	 * @param fd0 DMABUF/PRIME FD for plane0
+	 * @param stride0 Stride for plane0
+	 * @param fd1 DMABUF/PRIME FD for plane1
+	 * @param stride1 Stride for plane1
+	 * @param fd2 DMABUF/PRIME FD for plane2
+	 * @param stride2 Stride for plane2
+	 * @since 2
+	 */
+	void (*create_mp_buffer)(struct wl_client *client,
+				 struct wl_resource *resource,
+				 uint32_t id,
+				 int32_t width,
+				 int32_t height,
+				 uint32_t format,
+				 int32_t fd0,
+				 uint32_t stride0,
+				 int32_t fd1,
+				 uint32_t stride1,
+				 int32_t fd2,
+				 uint32_t stride2);
+};
+
+#define WL_KMS_DEVICE 0
+#define WL_KMS_FORMAT 1
+#define WL_KMS_AUTHENTICATED 2
+
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_DEVICE_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_FORMAT_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_AUTHENTICATED_SINCE_VERSION 1
+
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_AUTHENTICATE_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_CREATE_BUFFER_SINCE_VERSION 1
+/**
+ * @ingroup iface_wl_kms
+ */
+#define WL_KMS_CREATE_MP_BUFFER_SINCE_VERSION 2
+
+/**
+ * @ingroup iface_wl_kms
+ * Sends an device event to the client owning the resource.
+ * @param resource_ The client's resource
+ */
+static inline void
+wl_kms_send_device(struct wl_resource *resource_, const char *name)
+{
+	wl_resource_post_event(resource_, WL_KMS_DEVICE, name);
+}
+
+/**
+ * @ingroup iface_wl_kms
+ * Sends an format event to the client owning the resource.
+ * @param resource_ The client's resource
+ */
+static inline void
+wl_kms_send_format(struct wl_resource *resource_, uint32_t format)
+{
+	wl_resource_post_event(resource_, WL_KMS_FORMAT, format);
+}
+
+/**
+ * @ingroup iface_wl_kms
+ * Sends an authenticated event to the client owning the resource.
+ * @param resource_ The client's resource
+ */
+static inline void
+wl_kms_send_authenticated(struct wl_resource *resource_)
+{
+	wl_resource_post_event(resource_, WL_KMS_AUTHENTICATED);
+}
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif
diff --git a/third_party/wayland-protocols/protocol/wayland-kms-protocol.c b/third_party/wayland-protocols/protocol/wayland-kms-protocol.c
new file mode 100644
index 0000000000..b236699f7e
--- /dev/null
+++ b/third_party/wayland-protocols/protocol/wayland-kms-protocol.c
@@ -0,0 +1,76 @@
+/* Generated by wayland-scanner 1.13.0 */
+
+/*
+ * Copyright © 2013 Renesas Solutions Corp.
+ *
+ * Based on wayland-drm.xml:
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2010-2011 Intel Corporation
+ *
+ * Permission to use, copy, modify, distribute, and sell this
+ * software and its documentation for any purpose is hereby granted
+ * without fee, provided that\n the above copyright notice appear in
+ * all copies and that both that copyright notice and this permission
+ * notice appear in supporting documentation, and that the name of
+ * the copyright holders not be used in advertising or publicity
+ * pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no
+ * representations about the suitability of this software for any
+ * purpose.  It is provided "as is" without express or implied
+ * warranty.
+ *
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
+ * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
+ * THIS SOFTWARE.
+ */
+
+#include <stdlib.h>
+#include <stdint.h>
+#include "wayland-util.h"
+
+extern const struct wl_interface wl_buffer_interface;
+
+static const struct wl_interface *types[] = {
+	NULL,
+	&wl_buffer_interface,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	&wl_buffer_interface,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+};
+
+static const struct wl_message wl_kms_requests[] = {
+	{ "authenticate", "u", types + 0 },
+	{ "create_buffer", "nhiiuuu", types + 1 },
+	{ "create_mp_buffer", "2niiuhuhuhu", types + 8 },
+};
+
+static const struct wl_message wl_kms_events[] = {
+	{ "device", "s", types + 0 },
+	{ "format", "u", types + 0 },
+	{ "authenticated", "", types + 0 },
+};
+
+WL_EXPORT const struct wl_interface wl_kms_interface = {
+	"wl_kms", 2,
+	3, wl_kms_requests,
+	3, wl_kms_events,
+};
+
diff --git a/ui/ozone/platform/wayland/BUILD.gn b/ui/ozone/platform/wayland/BUILD.gn
index 332af4c314..d0f2582ce4 100644
--- a/ui/ozone/platform/wayland/BUILD.gn
+++ b/ui/ozone/platform/wayland/BUILD.gn
@@ -98,6 +98,7 @@ source_set("wayland") {
     "//third_party/wayland-protocols:linux_dmabuf_protocol",
     "//third_party/wayland-protocols:presentation_time_protocol",
     "//third_party/wayland-protocols:text_input_protocol",
+    "//third_party/wayland-protocols:wayland_kms_protocol",
     "//third_party/wayland-protocols:xdg_shell_protocol",
     "//ui/base",
     "//ui/base:ui_features",
-- 
2.11.0

